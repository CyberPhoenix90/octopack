"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const config_resolver_1 = require("config_resolver");
class ProjectCrawler {
    async findProjects(root, context) {
        if (!this.cache) {
            const result = [];
            await this.searchDirectory(result, root, context);
            this.cache = result;
        }
        return this.cache;
    }
    async searchDirectory(result, path, context) {
        if (await context.fileSystem.exists(path_1.join(path, config_resolver_1.OCTOPACK_CONFIG_FILE_NAME))) {
            const config = await config_resolver_1.loadConfig(path, context.fileSystem);
            if (config.scope === 'project' || config.isProject) {
                result.push({
                    path,
                    projectDependencies: new Set(),
                    fileDependencies: new Map(),
                    rawConfig: config,
                    resolvedConfig: config_resolver_1.resolveConfig({
                        project: config,
                        workspace: context.workspaceConfig
                    })
                });
            }
            else {
                await this.crawSubfolders(context, path, result);
            }
        }
        else {
            await this.crawSubfolders(context, path, result);
        }
    }
    async crawSubfolders(context, path, result) {
        const directories = await context.fileSystem.getSubfolders(path);
        for (const dir of directories) {
            await this.searchDirectory(result, dir, context);
        }
    }
}
exports.ProjectCrawler = ProjectCrawler;
exports.projectCrawler = new ProjectCrawler();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RfY3Jhd2xlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJwcm9qZWN0X2NyYXdsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IGNvbmZpZ19yZXNvbHZlcl8xID0gcmVxdWlyZShcImNvbmZpZ19yZXNvbHZlclwiKTtcbmNsYXNzIFByb2plY3RDcmF3bGVyIHtcbiAgICBhc3luYyBmaW5kUHJvamVjdHMocm9vdCwgY29udGV4dCkge1xuICAgICAgICBpZiAoIXRoaXMuY2FjaGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZWFyY2hEaXJlY3RvcnkocmVzdWx0LCByb290LCBjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUgPSByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGU7XG4gICAgfVxuICAgIGFzeW5jIHNlYXJjaERpcmVjdG9yeShyZXN1bHQsIHBhdGgsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGF3YWl0IGNvbnRleHQuZmlsZVN5c3RlbS5leGlzdHMocGF0aF8xLmpvaW4ocGF0aCwgY29uZmlnX3Jlc29sdmVyXzEuT0NUT1BBQ0tfQ09ORklHX0ZJTEVfTkFNRSkpKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBhd2FpdCBjb25maWdfcmVzb2x2ZXJfMS5sb2FkQ29uZmlnKHBhdGgsIGNvbnRleHQuZmlsZVN5c3RlbSk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnNjb3BlID09PSAncHJvamVjdCcgfHwgY29uZmlnLmlzUHJvamVjdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdERlcGVuZGVuY2llczogbmV3IFNldCgpLFxuICAgICAgICAgICAgICAgICAgICBmaWxlRGVwZW5kZW5jaWVzOiBuZXcgTWFwKCksXG4gICAgICAgICAgICAgICAgICAgIHJhd0NvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZENvbmZpZzogY29uZmlnX3Jlc29sdmVyXzEucmVzb2x2ZUNvbmZpZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBjb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3Jrc3BhY2U6IGNvbnRleHQud29ya3NwYWNlQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNyYXdTdWJmb2xkZXJzKGNvbnRleHQsIHBhdGgsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNyYXdTdWJmb2xkZXJzKGNvbnRleHQsIHBhdGgsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgY3Jhd1N1YmZvbGRlcnMoY29udGV4dCwgcGF0aCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdG9yaWVzID0gYXdhaXQgY29udGV4dC5maWxlU3lzdGVtLmdldFN1YmZvbGRlcnMocGF0aCk7XG4gICAgICAgIGZvciAoY29uc3QgZGlyIG9mIGRpcmVjdG9yaWVzKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNlYXJjaERpcmVjdG9yeShyZXN1bHQsIGRpciwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlByb2plY3RDcmF3bGVyID0gUHJvamVjdENyYXdsZXI7XG5leHBvcnRzLnByb2plY3RDcmF3bGVyID0gbmV3IFByb2plY3RDcmF3bGVyKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljSEp2YW1WamRGOWpjbUYzYkdWeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpY0hKdmFtVmpkRjlqY21GM2JHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNLMEpCUVRSQ08wRkJRelZDTEhGRVFVRjFSanRCUVVOMlJpeE5RVUZoTEdOQlFXTTdTVUZEZGtJc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHp0UlFVTTFRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0WlFVTmlMRTFCUVUwc1RVRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF6dFpRVU5zUWl4TlFVRk5MRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRaUVVOc1JDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJRenRUUVVOMlFqdFJRVU5FTEU5QlFVOHNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVOMFFpeERRVUZETzBsQlEwUXNTMEZCU3l4RFFVRkRMR1ZCUVdVc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEU5QlFVODdVVUZEZGtNc1NVRkJTU3hOUVVGTkxFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzTWtOQlFYbENMRU5CUVVNc1EwRkJReXhGUVVGRk8xbEJRM2hGTEUxQlFVMHNUVUZCVFN4SFFVRkhMRTFCUVUwc05FSkJRVlVzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xbEJRekZFTEVsQlFVa3NUVUZCVFN4RFFVRkRMRXRCUVVzc1MwRkJTeXhUUVVGVExFbEJRVWtzVFVGQlRTeERRVUZETEZOQlFWTXNSVUZCUlR0blFrRkRhRVFzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkRVaXhKUVVGSk8yOUNRVU5LTEcxQ1FVRnRRaXhGUVVGRkxFbEJRVWtzUjBGQlJ5eEZRVUZGTzI5Q1FVTTVRaXhuUWtGQlowSXNSVUZCUlN4SlFVRkpMRWRCUVVjc1JVRkJSVHR2UWtGRE0wSXNVMEZCVXl4RlFVRkZMRTFCUVUwN2IwSkJRMnBDTEdOQlFXTXNSVUZCUlN3clFrRkJZU3hEUVVGRE8zZENRVU14UWl4UFFVRlBMRVZCUVVVc1RVRkJUVHQzUWtGRFppeFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMR1ZCUVdVN2NVSkJRM0pETEVOQlFVTTdhVUpCUTB3c1EwRkJReXhEUVVGRE8yRkJRMDQ3YVVKQlEwazdaMEpCUTBRc1RVRkJUU3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03WVVGRGNFUTdVMEZEU2p0aFFVTkpPMWxCUTBRc1RVRkJUU3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03VTBGRGNFUTdTVUZEVEN4RFFVRkRPMGxCUTBRc1MwRkJTeXhEUVVGRExHTkJRV01zUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTFCUVUwN1VVRkRkRU1zVFVGQlRTeFhRVUZYTEVkQlFVY3NUVUZCVFN4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTnFSU3hMUVVGTExFMUJRVTBzUjBGQlJ5eEpRVUZKTEZkQlFWY3NSVUZCUlR0WlFVTXpRaXhOUVVGTkxFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dFRRVU53UkR0SlFVTk1MRU5CUVVNN1EwRkRTanRCUVhSRFJDeDNRMEZ6UTBNN1FVRkRXU3hSUVVGQkxHTkJRV01zUjBGQlJ5eEpRVUZKTEdOQlFXTXNSVUZCUlN4RFFVRkRJbjA9Il19