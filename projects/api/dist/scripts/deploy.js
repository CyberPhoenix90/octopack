"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const project_crawler_1 = require("../projects/project_crawler");
const script_1 = require("./script");
const project_selector_1 = require("../projects/project_selector");
const build_1 = require("./build");
const config_resolver_1 = require("config_resolver");
const path_1 = require("path");
class Deploy extends script_1.Script {
    autoComplete() {
        throw new Error('Method not implemented.');
    }
    help() {
        return {
            description: 'Deploys stuff'
        };
    }
    async run(args, context) {
        const allProjects = await project_crawler_1.projectCrawler.findProjects(context.workspaceRoot, context);
        const selectedProjects = project_selector_1.getSelectedProjects(args.list, allProjects, context).filter((p) => p.resolvedConfig.deploy);
        if (selectedProjects.length) {
            await new build_1.Build().run({
                list: selectedProjects.map((p) => p.resolvedConfig.name),
                map: {
                    remapImportSource: './internalDependencies',
                    ...args.map
                },
                raw: args.raw
            }, context);
            for (const project of selectedProjects) {
                const bundle = config_resolver_1.getBundle(project.resolvedConfig, args.map);
                if (!bundle) {
                    throw new Error(`No bundle could be determined for project ${project} please define a default or state the bundle to be used with a CLI flag`);
                }
                const config = project.resolvedConfig.build.bundles[bundle];
                const outDir = path_1.join(project.path, config.output);
                context.fileSystem.copyDirectory(outDir, path_1.join(project.path, 'internalDependencies'));
            }
        }
        else {
            context.uiLogger.error('None of the provided names were matching a project. Not building.');
        }
        return {};
    }
}
exports.Deploy = Deploy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlcGxveS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImRlcGxveS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHByb2plY3RfY3Jhd2xlcl8xID0gcmVxdWlyZShcIi4uL3Byb2plY3RzL3Byb2plY3RfY3Jhd2xlclwiKTtcbmNvbnN0IHNjcmlwdF8xID0gcmVxdWlyZShcIi4vc2NyaXB0XCIpO1xuY29uc3QgcHJvamVjdF9zZWxlY3Rvcl8xID0gcmVxdWlyZShcIi4uL3Byb2plY3RzL3Byb2plY3Rfc2VsZWN0b3JcIik7XG5jb25zdCBidWlsZF8xID0gcmVxdWlyZShcIi4vYnVpbGRcIik7XG5jb25zdCBjb25maWdfcmVzb2x2ZXJfMSA9IHJlcXVpcmUoXCJjb25maWdfcmVzb2x2ZXJcIik7XG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcbmNsYXNzIERlcGxveSBleHRlbmRzIHNjcmlwdF8xLlNjcmlwdCB7XG4gICAgYXV0b0NvbXBsZXRlKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgfVxuICAgIGhlbHAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0RlcGxveXMgc3R1ZmYnXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHJ1bihhcmdzLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGFsbFByb2plY3RzID0gYXdhaXQgcHJvamVjdF9jcmF3bGVyXzEucHJvamVjdENyYXdsZXIuZmluZFByb2plY3RzKGNvbnRleHQud29ya3NwYWNlUm9vdCwgY29udGV4dCk7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkUHJvamVjdHMgPSBwcm9qZWN0X3NlbGVjdG9yXzEuZ2V0U2VsZWN0ZWRQcm9qZWN0cyhhcmdzLmxpc3QsIGFsbFByb2plY3RzLCBjb250ZXh0KS5maWx0ZXIoKHApID0+IHAucmVzb2x2ZWRDb25maWcuZGVwbG95KTtcbiAgICAgICAgaWYgKHNlbGVjdGVkUHJvamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBhd2FpdCBuZXcgYnVpbGRfMS5CdWlsZCgpLnJ1bih7XG4gICAgICAgICAgICAgICAgbGlzdDogc2VsZWN0ZWRQcm9qZWN0cy5tYXAoKHApID0+IHAucmVzb2x2ZWRDb25maWcubmFtZSksXG4gICAgICAgICAgICAgICAgbWFwOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlbWFwSW1wb3J0U291cmNlOiAnLi9pbnRlcm5hbERlcGVuZGVuY2llcycsXG4gICAgICAgICAgICAgICAgICAgIC4uLmFyZ3MubWFwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByYXc6IGFyZ3MucmF3XG4gICAgICAgICAgICB9LCBjb250ZXh0KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBzZWxlY3RlZFByb2plY3RzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVuZGxlID0gY29uZmlnX3Jlc29sdmVyXzEuZ2V0QnVuZGxlKHByb2plY3QucmVzb2x2ZWRDb25maWcsIGFyZ3MubWFwKTtcbiAgICAgICAgICAgICAgICBpZiAoIWJ1bmRsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGJ1bmRsZSBjb3VsZCBiZSBkZXRlcm1pbmVkIGZvciBwcm9qZWN0ICR7cHJvamVjdH0gcGxlYXNlIGRlZmluZSBhIGRlZmF1bHQgb3Igc3RhdGUgdGhlIGJ1bmRsZSB0byBiZSB1c2VkIHdpdGggYSBDTEkgZmxhZ2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSBwcm9qZWN0LnJlc29sdmVkQ29uZmlnLmJ1aWxkLmJ1bmRsZXNbYnVuZGxlXTtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXREaXIgPSBwYXRoXzEuam9pbihwcm9qZWN0LnBhdGgsIGNvbmZpZy5vdXRwdXQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsZVN5c3RlbS5jb3B5RGlyZWN0b3J5KG91dERpciwgcGF0aF8xLmpvaW4ocHJvamVjdC5wYXRoLCAnaW50ZXJuYWxEZXBlbmRlbmNpZXMnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0LnVpTG9nZ2VyLmVycm9yKCdOb25lIG9mIHRoZSBwcm92aWRlZCBuYW1lcyB3ZXJlIG1hdGNoaW5nIGEgcHJvamVjdC4gTm90IGJ1aWxkaW5nLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59XG5leHBvcnRzLkRlcGxveSA9IERlcGxveTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpHVndiRzk1TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2laR1Z3Ykc5NUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc2FVVkJRVFpFTzBGQlF6ZEVMSEZEUVVGclF6dEJRVU5zUXl4dFJVRkJiVVU3UVVGRGJrVXNiVU5CUVdkRE8wRkJRMmhETEhGRVFVRTBRenRCUVVNMVF5d3JRa0ZCTkVJN1FVRkROVUlzVFVGQllTeE5RVUZQTEZOQlFWRXNaVUZCVFR0SlFVTTVRaXhaUVVGWk8xRkJRMUlzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eERRVUZETzBsQlF5OURMRU5CUVVNN1NVRkRSQ3hKUVVGSk8xRkJRMEVzVDBGQlR6dFpRVU5JTEZkQlFWY3NSVUZCUlN4bFFVRmxPMU5CUXk5Q0xFTkJRVU03U1VGRFRpeERRVUZETzBsQlEwUXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR6dFJRVU51UWl4TlFVRk5MRmRCUVZjc1IwRkJSeXhOUVVGTkxHZERRVUZqTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEZEVZc1RVRkJUU3huUWtGQlowSXNSMEZCUnl4elEwRkJiVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRmRCUVZjc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRja2dzU1VGQlNTeG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFVkJRVVU3V1VGRGVrSXNUVUZCVFN4SlFVRkpMR0ZCUVVzc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF6dG5Ra0ZEYkVJc1NVRkJTU3hGUVVGRkxHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU03WjBKQlEzaEVMRWRCUVVjc1JVRkJSVHR2UWtGRFJDeHBRa0ZCYVVJc1JVRkJSU3gzUWtGQmQwSTdiMEpCUXpORExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVYzdhVUpCUTJRN1owSkJRMFFzUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhPMkZCUTJoQ0xFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdXVUZEV2l4TFFVRkxMRTFCUVUwc1QwRkJUeXhKUVVGSkxHZENRVUZuUWl4RlFVRkZPMmRDUVVOd1F5eE5RVUZOTEUxQlFVMHNSMEZCUnl3eVFrRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eGpRVUZqTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yZENRVU16UkN4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8yOUNRVU5VTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc05rTkJRVFpETEU5QlFVOHNlVVZCUVhsRkxFTkJRVU1zUTBGQlF6dHBRa0ZEYkVvN1owSkJRMFFzVFVGQlRTeE5RVUZOTEVkQlFVY3NUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMmRDUVVNMVJDeE5RVUZOTEUxQlFVMHNSMEZCUnl4WFFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1owSkJRMnBFTEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNc1lVRkJZU3hEUVVGRExFMUJRVTBzUlVGQlJTeFhRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3h6UWtGQmMwSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1lVRkRlRVk3VTBGRFNqdGhRVU5KTzFsQlEwUXNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zYlVWQlFXMUZMRU5CUVVNc1EwRkJRenRUUVVNdlJqdFJRVU5FTEU5QlFVOHNSVUZCUlN4RFFVRkRPMGxCUTJRc1EwRkJRenREUVVOS08wRkJjRU5FTEhkQ1FXOURReUo5Il19