"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const npm_installer_1 = require("npm_installer");
const project_importer_1 = require("project_importer");
const typescript_plugin_1 = require("typescript_plugin");
const meta_programming_1 = require("meta_programming");
const barrel_file_1 = require("barrel_file");
const output_plugin_1 = require("output_plugin");
const runtime_1 = require("runtime");
const npm_importer_1 = require("npm_importer");
function loadBuildPlugin(plugin) {
    if (typeof plugin === 'string') {
        return initializePlugin(plugin, {});
    }
    else {
        return initializePlugin(plugin.name, plugin.config);
    }
}
exports.loadBuildPlugin = loadBuildPlugin;
function initializePlugin(name, args) {
    switch (name) {
        case 'projectImporter':
            return project_importer_1.projectImporter(args);
        case 'npmImporter':
            return npm_importer_1.npmImporter(args);
        case 'typescript':
            return typescript_plugin_1.typescript(args);
        case 'npmInstall':
            return npm_installer_1.npmInstall(args);
        case 'metaProgramming':
            return meta_programming_1.metaProgramming(args);
        case 'barrelFile':
            return barrel_file_1.barrelFile(args);
        case 'output':
            return output_plugin_1.output(args);
        case 'runtime':
            return runtime_1.runtime(args);
        default:
            throw new Error(`Plugin ${name} not found`);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkX3BsdWdpbl9sb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImJ1aWxkX3BsdWdpbl9sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBucG1faW5zdGFsbGVyXzEgPSByZXF1aXJlKFwibnBtX2luc3RhbGxlclwiKTtcbmNvbnN0IHByb2plY3RfaW1wb3J0ZXJfMSA9IHJlcXVpcmUoXCJwcm9qZWN0X2ltcG9ydGVyXCIpO1xuY29uc3QgdHlwZXNjcmlwdF9wbHVnaW5fMSA9IHJlcXVpcmUoXCJ0eXBlc2NyaXB0X3BsdWdpblwiKTtcbmNvbnN0IG1ldGFfcHJvZ3JhbW1pbmdfMSA9IHJlcXVpcmUoXCJtZXRhX3Byb2dyYW1taW5nXCIpO1xuY29uc3QgYmFycmVsX2ZpbGVfMSA9IHJlcXVpcmUoXCJiYXJyZWxfZmlsZVwiKTtcbmNvbnN0IG91dHB1dF9wbHVnaW5fMSA9IHJlcXVpcmUoXCJvdXRwdXRfcGx1Z2luXCIpO1xuY29uc3QgcnVudGltZV8xID0gcmVxdWlyZShcInJ1bnRpbWVcIik7XG5jb25zdCBucG1faW1wb3J0ZXJfMSA9IHJlcXVpcmUoXCJucG1faW1wb3J0ZXJcIik7XG5mdW5jdGlvbiBsb2FkQnVpbGRQbHVnaW4ocGx1Z2luKSB7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbml0aWFsaXplUGx1Z2luKHBsdWdpbiwge30pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGluaXRpYWxpemVQbHVnaW4ocGx1Z2luLm5hbWUsIHBsdWdpbi5jb25maWcpO1xuICAgIH1cbn1cbmV4cG9ydHMubG9hZEJ1aWxkUGx1Z2luID0gbG9hZEJ1aWxkUGx1Z2luO1xuZnVuY3Rpb24gaW5pdGlhbGl6ZVBsdWdpbihuYW1lLCBhcmdzKSB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgIGNhc2UgJ3Byb2plY3RJbXBvcnRlcic6XG4gICAgICAgICAgICByZXR1cm4gcHJvamVjdF9pbXBvcnRlcl8xLnByb2plY3RJbXBvcnRlcihhcmdzKTtcbiAgICAgICAgY2FzZSAnbnBtSW1wb3J0ZXInOlxuICAgICAgICAgICAgcmV0dXJuIG5wbV9pbXBvcnRlcl8xLm5wbUltcG9ydGVyKGFyZ3MpO1xuICAgICAgICBjYXNlICd0eXBlc2NyaXB0JzpcbiAgICAgICAgICAgIHJldHVybiB0eXBlc2NyaXB0X3BsdWdpbl8xLnR5cGVzY3JpcHQoYXJncyk7XG4gICAgICAgIGNhc2UgJ25wbUluc3RhbGwnOlxuICAgICAgICAgICAgcmV0dXJuIG5wbV9pbnN0YWxsZXJfMS5ucG1JbnN0YWxsKGFyZ3MpO1xuICAgICAgICBjYXNlICdtZXRhUHJvZ3JhbW1pbmcnOlxuICAgICAgICAgICAgcmV0dXJuIG1ldGFfcHJvZ3JhbW1pbmdfMS5tZXRhUHJvZ3JhbW1pbmcoYXJncyk7XG4gICAgICAgIGNhc2UgJ2JhcnJlbEZpbGUnOlxuICAgICAgICAgICAgcmV0dXJuIGJhcnJlbF9maWxlXzEuYmFycmVsRmlsZShhcmdzKTtcbiAgICAgICAgY2FzZSAnb3V0cHV0JzpcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRfcGx1Z2luXzEub3V0cHV0KGFyZ3MpO1xuICAgICAgICBjYXNlICdydW50aW1lJzpcbiAgICAgICAgICAgIHJldHVybiBydW50aW1lXzEucnVudGltZShhcmdzKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUGx1Z2luICR7bmFtZX0gbm90IGZvdW5kYCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWW5WcGJHUmZjR3gxWjJsdVgyeHZZV1JsY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbUoxYVd4a1gzQnNkV2RwYmw5c2IyRmtaWEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hwUkVGQk1rTTdRVUZETTBNc2RVUkJRVzFFTzBGQlEyNUVMSGxFUVVFclF6dEJRVU12UXl4MVJFRkJiVVE3UVVGRGJrUXNOa05CUVhsRE8wRkJRM3BETEdsRVFVRjFRenRCUVVOMlF5eHhRMEZCYTBNN1FVRkRiRU1zSzBOQlFUSkRPMEZCUXpORExGTkJRV2RDTEdWQlFXVXNRMEZCUXl4TlFVRk5PMGxCUTJ4RExFbEJRVWtzVDBGQlR5eE5RVUZOTEV0QlFVc3NVVUZCVVN4RlFVRkZPMUZCUXpWQ0xFOUJRVThzWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzB0QlEzWkRPMU5CUTBrN1VVRkRSQ3hQUVVGUExHZENRVUZuUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMHRCUTNaRU8wRkJRMHdzUTBGQlF6dEJRVkJFTERCRFFVOURPMEZCUTBRc1UwRkJVeXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTVHRKUVVOb1F5eFJRVUZSTEVsQlFVa3NSVUZCUlR0UlFVTldMRXRCUVVzc2FVSkJRV2xDTzFsQlEyeENMRTlCUVU4c2EwTkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTnFReXhMUVVGTExHRkJRV0U3V1VGRFpDeFBRVUZQTERCQ1FVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRE4wSXNTMEZCU3l4WlFVRlpPMWxCUTJJc1QwRkJUeXc0UWtGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXpWQ0xFdEJRVXNzV1VGQldUdFpRVU5pTEU5QlFVOHNNRUpCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU0xUWl4TFFVRkxMR2xDUVVGcFFqdFpRVU5zUWl4UFFVRlBMR3REUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEYWtNc1MwRkJTeXhaUVVGWk8xbEJRMklzVDBGQlR5eDNRa0ZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRelZDTEV0QlFVc3NVVUZCVVR0WlFVTlVMRTlCUVU4c2MwSkJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTjRRaXhMUVVGTExGTkJRVk03V1VGRFZpeFBRVUZQTEdsQ1FVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRGVrSTdXVUZEU1N4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExGVkJRVlVzU1VGQlNTeFpRVUZaTEVOQlFVTXNRMEZCUXp0TFFVTnVSRHRCUVVOTUxFTkJRVU1pZlE9PSJdfQ==