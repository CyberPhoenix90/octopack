"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('你好世界');
const static_analyser_1 = require("static_analyser");
const vm = require("vm");
function metaProgramming(args) {
    return async (model, context) => {
        context.uiLogger.info(`[${model.project.resolvedConfig.name}]Evaluating meta programming`);
        for (const file of model.input) {
            if (file.endsWith('.ts') || file.endsWith('.tsx') || file.endsWith('.js') || file.endsWith('.jsx')) {
                evaluate(file, model.project, model.allProjects, model);
            }
        }
        return model;
    };
}
exports.metaProgramming = metaProgramming;
async function evaluate(file, project, allProjects, model) {
    const fm = new static_analyser_1.FileManipulator(await model.fileSystem.readFile(file, 'utf8'));
    fm.forEachComment((text, position) => {
        if (text.includes('#generator(')) {
            let code = text.substring(text.indexOf('#generator(') + 1);
            if (code.endsWith('*/')) {
                code = code.substring(0, code.length - 2);
            }
            const replacement = runModule(code);
            return [
                {
                    start: position.fullStart,
                    end: position.end,
                    replacement
                }
            ];
        }
        else {
            return [];
        }
    });
    fm.applyManipulations();
    await model.fileSystem.writeFile(file, fm.content);
}
function runModule(code) {
    const replacement = [];
    const sandboxContext = {
        compiler: {
            writeLine(line) {
                replacement.push(line);
            }
        }
    };
    vm.createContext(sandboxContext);
    vm.runInContext(`(function ${code})(compiler)`, sandboxContext);
    return replacement.join('\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGFfcHJvZ3JhbW1pbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibWV0YV9wcm9ncmFtbWluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnNvbGUubG9nKCfkvaDlpb3kuJbnlYwnKTtcbmNvbnN0IHN0YXRpY19hbmFseXNlcl8xID0gcmVxdWlyZShcInN0YXRpY19hbmFseXNlclwiKTtcbmNvbnN0IHZtID0gcmVxdWlyZShcInZtXCIpO1xuZnVuY3Rpb24gbWV0YVByb2dyYW1taW5nKGFyZ3MpIHtcbiAgICByZXR1cm4gYXN5bmMgKG1vZGVsLCBjb250ZXh0KSA9PiB7XG4gICAgICAgIGNvbnRleHQudWlMb2dnZXIuaW5mbyhgWyR7bW9kZWwucHJvamVjdC5yZXNvbHZlZENvbmZpZy5uYW1lfV1FdmFsdWF0aW5nIG1ldGEgcHJvZ3JhbW1pbmdgKTtcbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIG1vZGVsLmlucHV0KSB7XG4gICAgICAgICAgICBpZiAoZmlsZS5lbmRzV2l0aCgnLnRzJykgfHwgZmlsZS5lbmRzV2l0aCgnLnRzeCcpIHx8IGZpbGUuZW5kc1dpdGgoJy5qcycpIHx8IGZpbGUuZW5kc1dpdGgoJy5qc3gnKSkge1xuICAgICAgICAgICAgICAgIGV2YWx1YXRlKGZpbGUsIG1vZGVsLnByb2plY3QsIG1vZGVsLmFsbFByb2plY3RzLCBtb2RlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH07XG59XG5leHBvcnRzLm1ldGFQcm9ncmFtbWluZyA9IG1ldGFQcm9ncmFtbWluZztcbmFzeW5jIGZ1bmN0aW9uIGV2YWx1YXRlKGZpbGUsIHByb2plY3QsIGFsbFByb2plY3RzLCBtb2RlbCkge1xuICAgIGNvbnN0IGZtID0gbmV3IHN0YXRpY19hbmFseXNlcl8xLkZpbGVNYW5pcHVsYXRvcihhd2FpdCBtb2RlbC5maWxlU3lzdGVtLnJlYWRGaWxlKGZpbGUsICd1dGY4JykpO1xuICAgIGZtLmZvckVhY2hDb21tZW50KCh0ZXh0LCBwb3NpdGlvbikgPT4ge1xuICAgICAgICBpZiAodGV4dC5pbmNsdWRlcygnI2dlbmVyYXRvcignKSkge1xuICAgICAgICAgICAgbGV0IGNvZGUgPSB0ZXh0LnN1YnN0cmluZyh0ZXh0LmluZGV4T2YoJyNnZW5lcmF0b3IoJykgKyAxKTtcbiAgICAgICAgICAgIGlmIChjb2RlLmVuZHNXaXRoKCcqLycpKSB7XG4gICAgICAgICAgICAgICAgY29kZSA9IGNvZGUuc3Vic3RyaW5nKDAsIGNvZGUubGVuZ3RoIC0gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHJ1bk1vZHVsZShjb2RlKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zaXRpb24uZnVsbFN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IHBvc2l0aW9uLmVuZCxcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZm0uYXBwbHlNYW5pcHVsYXRpb25zKCk7XG4gICAgYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS53cml0ZUZpbGUoZmlsZSwgZm0uY29udGVudCk7XG59XG5mdW5jdGlvbiBydW5Nb2R1bGUoY29kZSkge1xuICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gW107XG4gICAgY29uc3Qgc2FuZGJveENvbnRleHQgPSB7XG4gICAgICAgIGNvbXBpbGVyOiB7XG4gICAgICAgICAgICB3cml0ZUxpbmUobGluZSkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50LnB1c2gobGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZtLmNyZWF0ZUNvbnRleHQoc2FuZGJveENvbnRleHQpO1xuICAgIHZtLnJ1bkluQ29udGV4dChgKGZ1bmN0aW9uICR7Y29kZX0pKGNvbXBpbGVyKWAsIHNhbmRib3hDb250ZXh0KTtcbiAgICByZXR1cm4gcmVwbGFjZW1lbnQuam9pbignXFxuJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liV1YwWVY5d2NtOW5jbUZ0YldsdVp5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW0xbGRHRmZjSEp2WjNKaGJXMXBibWN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMEZCUTNCQ0xIRkVRVUZyUkR0QlFVTnNSQ3g1UWtGQmVVSTdRVUZEZWtJc1UwRkJaMElzWlVGQlpTeERRVUZETEVsQlFVazdTVUZEYUVNc1QwRkJUeXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEU5QlFVOHNSVUZCUlN4RlFVRkZPMUZCUXpWQ0xFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N3NFFrRkJPRUlzUTBGQlF5eERRVUZETzFGQlF6TkdMRXRCUVVzc1RVRkJUU3hKUVVGSkxFbEJRVWtzUzBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlR0WlFVTTFRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVU3WjBKQlEyaEhMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1YwRkJWeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzJGQlF6TkVPMU5CUTBvN1VVRkRSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dEpRVU5xUWl4RFFVRkRMRU5CUVVNN1FVRkRUaXhEUVVGRE8wRkJWa1FzTUVOQlZVTTdRVUZEUkN4TFFVRkxMRlZCUVZVc1VVRkJVU3hEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVWQlFVVXNWMEZCVnl4RlFVRkZMRXRCUVVzN1NVRkRja1FzVFVGQlRTeEZRVUZGTEVkQlFVY3NTVUZCU1N4cFEwRkJaU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZET1VVc1JVRkJSU3hEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4UlFVRlJMRVZCUVVVc1JVRkJSVHRSUVVOcVF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFVkJRVVU3V1VGRE9VSXNTVUZCU1N4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMR0ZCUVdFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlF6TkVMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0blFrRkRja0lzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1lVRkROME03V1VGRFJDeE5RVUZOTEZkQlFWY3NSMEZCUnl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRGNFTXNUMEZCVHp0blFrRkRTRHR2UWtGRFNTeExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRk5CUVZNN2IwSkJRM3BDTEVkQlFVY3NSVUZCUlN4UlFVRlJMRU5CUVVNc1IwRkJSenR2UWtGRGFrSXNWMEZCVnp0cFFrRkRaRHRoUVVOS0xFTkJRVU03VTBGRFREdGhRVU5KTzFsQlEwUXNUMEZCVHl4RlFVRkZMRU5CUVVNN1UwRkRZanRKUVVOTUxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEwZ3NSVUZCUlN4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEVOQlFVTTdTVUZEZUVJc1RVRkJUU3hMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBGQlEzWkVMRU5CUVVNN1FVRkRSQ3hUUVVGVExGTkJRVk1zUTBGQlF5eEpRVUZKTzBsQlEyNUNMRTFCUVUwc1YwRkJWeXhIUVVGSExFVkJRVVVzUTBGQlF6dEpRVU4yUWl4TlFVRk5MR05CUVdNc1IwRkJSenRSUVVOdVFpeFJRVUZSTEVWQlFVVTdXVUZEVGl4VFFVRlRMRU5CUVVNc1NVRkJTVHRuUWtGRFZpeFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJRek5DTEVOQlFVTTdVMEZEU2p0TFFVTktMRU5CUVVNN1NVRkRSaXhGUVVGRkxFTkJRVU1zWVVGQllTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPMGxCUTJwRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVOQlFVTXNZVUZCWVN4SlFVRkpMR0ZCUVdFc1JVRkJSU3hqUVVGakxFTkJRVU1zUTBGQlF6dEpRVU5vUlN4UFFVRlBMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEYkVNc1EwRkJReUo5Il19