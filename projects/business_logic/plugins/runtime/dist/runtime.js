"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
function runtime(args) {
    return async (model, context) => {
        var _a, _b, _c;
        let path = path_1.join(model.project.path, args.out);
        let handleExisting = (_a = args.handleExisting, (_a !== null && _a !== void 0 ? _a : 'replace'));
        let runtime = `${_b = args.header, (_b !== null && _b !== void 0 ? _b : '')}`;
        if (model.projectDependencies.size) {
            runtime += `
${createImportMap(model, path)}
const mod = require('module');

const original = mod.prototype.require;
mod.prototype.require = function(path, ...args) {
	if (importData[path]) {
		path = importData[path];
		return original.call(module, path, ...args);
	} else {
		return original.call(this, path, ...args);
	}
};
`;
        }
        runtime += `${_c = args.footer, (_c !== null && _c !== void 0 ? _c : '')}`;
        if (await model.fileSystem.exists(path)) {
            let existing;
            switch (handleExisting) {
                case 'append':
                    existing = await model.fileSystem.readFile(path, 'utf8');
                    await model.fileSystem.writeFile(path, `${existing}\n${runtime}`);
                    break;
                case 'replace':
                    await model.fileSystem.writeFile(path, runtime);
                    break;
                case 'prepend':
                    existing = await model.fileSystem.readFile(path, 'utf8');
                    await model.fileSystem.writeFile(path, `${runtime}\n${existing}`);
                    break;
            }
        }
        else {
            await model.fileSystem.writeFile(path, runtime);
        }
        return model;
    };
}
exports.runtime = runtime;
function createImportMap(model, path) {
    const result = [];
    for (const dep of model.projectDependencies) {
        result.push(`'${dep.resolvedConfig.name}': '${path_1.relative(path_1.parse(path).dir, dep.path)}'`);
    }
    return `const importData = {${result.join(',')}}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6InJ1bnRpbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcbmZ1bmN0aW9uIHJ1bnRpbWUoYXJncykge1xuICAgIHJldHVybiBhc3luYyAobW9kZWwsIGNvbnRleHQpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGxldCBwYXRoID0gcGF0aF8xLmpvaW4obW9kZWwucHJvamVjdC5wYXRoLCBhcmdzLm91dCk7XG4gICAgICAgIGxldCBoYW5kbGVFeGlzdGluZyA9IChfYSA9IGFyZ3MuaGFuZGxlRXhpc3RpbmcsIChfYSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAncmVwbGFjZScpKTtcbiAgICAgICAgbGV0IHJ1bnRpbWUgPSBgJHtfYiA9IGFyZ3MuaGVhZGVyLCAoX2IgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJycpfWA7XG4gICAgICAgIGlmIChtb2RlbC5wcm9qZWN0RGVwZW5kZW5jaWVzLnNpemUpIHtcbiAgICAgICAgICAgIHJ1bnRpbWUgKz0gYFxuJHtjcmVhdGVJbXBvcnRNYXAobW9kZWwsIHBhdGgpfVxuY29uc3QgbW9kID0gcmVxdWlyZSgnbW9kdWxlJyk7XG5cbmNvbnN0IG9yaWdpbmFsID0gbW9kLnByb3RvdHlwZS5yZXF1aXJlO1xubW9kLnByb3RvdHlwZS5yZXF1aXJlID0gZnVuY3Rpb24ocGF0aCwgLi4uYXJncykge1xuXHRpZiAoaW1wb3J0RGF0YVtwYXRoXSkge1xuXHRcdHBhdGggPSBpbXBvcnREYXRhW3BhdGhdO1xuXHRcdHJldHVybiBvcmlnaW5hbC5jYWxsKG1vZHVsZSwgcGF0aCwgLi4uYXJncyk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgcGF0aCwgLi4uYXJncyk7XG5cdH1cbn07XG5gO1xuICAgICAgICB9XG4gICAgICAgIHJ1bnRpbWUgKz0gYCR7X2MgPSBhcmdzLmZvb3RlciwgKF9jICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnKX1gO1xuICAgICAgICBpZiAoYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS5leGlzdHMocGF0aCkpIHtcbiAgICAgICAgICAgIGxldCBleGlzdGluZztcbiAgICAgICAgICAgIHN3aXRjaCAoaGFuZGxlRXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdhcHBlbmQnOlxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZyA9IGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0ucmVhZEZpbGUocGF0aCwgJ3V0ZjgnKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS53cml0ZUZpbGUocGF0aCwgYCR7ZXhpc3Rpbmd9XFxuJHtydW50aW1lfWApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZXBsYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS53cml0ZUZpbGUocGF0aCwgcnVudGltZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3ByZXBlbmQnOlxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZyA9IGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0ucmVhZEZpbGUocGF0aCwgJ3V0ZjgnKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS53cml0ZUZpbGUocGF0aCwgYCR7cnVudGltZX1cXG4ke2V4aXN0aW5nfWApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0ud3JpdGVGaWxlKHBhdGgsIHJ1bnRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9O1xufVxuZXhwb3J0cy5ydW50aW1lID0gcnVudGltZTtcbmZ1bmN0aW9uIGNyZWF0ZUltcG9ydE1hcChtb2RlbCwgcGF0aCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAoY29uc3QgZGVwIG9mIG1vZGVsLnByb2plY3REZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goYCcke2RlcC5yZXNvbHZlZENvbmZpZy5uYW1lfSc6ICcke3BhdGhfMS5yZWxhdGl2ZShwYXRoXzEucGFyc2UocGF0aCkuZGlyLCBkZXAucGF0aCl9J2ApO1xuICAgIH1cbiAgICByZXR1cm4gYGNvbnN0IGltcG9ydERhdGEgPSB7JHtyZXN1bHQuam9pbignLCcpfX1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY25WdWRHbHRaUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYkluSjFiblJwYldVdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN3clFrRkJOa003UVVGRE4wTXNVMEZCWjBJc1QwRkJUeXhEUVVGRExFbEJRVWs3U1VGRGVFSXNUMEZCVHl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJTeEZRVUZGTzFGQlF6VkNMRWxCUVVrc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVOQlFVTTdVVUZEWml4SlFVRkpMRWxCUVVrc1IwRkJSeXhYUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFGQlF6bERMRWxCUVVrc1kwRkJZeXhIUVVGSExFTkJRVU1zUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJReXhGUVVGRkxFdEJRVXNzU1VGQlNTeEpRVUZKTEVWQlFVVXNTMEZCU3l4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMnBITEVsQlFVa3NUMEZCVHl4SFFVRkhMRWRCUVVjc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRXRCUVVzc1NVRkJTU3hKUVVGSkxFVkJRVVVzUzBGQlN5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRPMUZCUXpsRkxFbEJRVWtzUzBGQlN5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUlVGQlJUdFpRVU5vUXl4UFFVRlBMRWxCUVVrN1JVRkRja0lzWlVGQlpTeERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNN096czdPenM3T3pzN096dERRVmszUWl4RFFVRkRPMU5CUTA4N1VVRkRSQ3hQUVVGUExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eEpRVUZKTEVsQlFVa3NSVUZCUlN4TFFVRkxMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU03VVVGRE0wVXNTVUZCU1N4TlFVRk5MRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMWxCUTNKRExFbEJRVWtzVVVGQlVTeERRVUZETzFsQlEySXNVVUZCVVN4alFVRmpMRVZCUVVVN1owSkJRM0JDTEV0QlFVc3NVVUZCVVR0dlFrRkRWQ3hSUVVGUkxFZEJRVWNzVFVGQlRTeExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdiMEpCUTNwRUxFMUJRVTBzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFZEJRVWNzVVVGQlVTeExRVUZMTEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNN2IwSkJRMnhGTEUxQlFVMDdaMEpCUTFZc1MwRkJTeXhUUVVGVE8yOUNRVU5XTEUxQlFVMHNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMjlDUVVOb1JDeE5RVUZOTzJkQ1FVTldMRXRCUVVzc1UwRkJVenR2UWtGRFZpeFJRVUZSTEVkQlFVY3NUVUZCVFN4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN2IwSkJRM3BFTEUxQlFVMHNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEVkQlFVY3NUMEZCVHl4TFFVRkxMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU03YjBKQlEyeEZMRTFCUVUwN1lVRkRZanRUUVVOS08yRkJRMGs3V1VGRFJDeE5RVUZOTEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0VFFVTnVSRHRSUVVORUxFOUJRVThzUzBGQlN5eERRVUZETzBsQlEycENMRU5CUVVNc1EwRkJRenRCUVVOT0xFTkJRVU03UVVFMVEwUXNNRUpCTkVORE8wRkJRMFFzVTBGQlV5eGxRVUZsTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrN1NVRkRhRU1zVFVGQlRTeE5RVUZOTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUTJ4Q0xFdEJRVXNzVFVGQlRTeEhRVUZITEVsQlFVa3NTMEZCU3l4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTzFGQlEzcERMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1QwRkJUeXhsUVVGUkxFTkJRVU1zV1VGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMHRCUTNwR08wbEJRMFFzVDBGQlR5eDFRa0ZCZFVJc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTNSRUxFTkJRVU1pZlE9PSJdfQ==