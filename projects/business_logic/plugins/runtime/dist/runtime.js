"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
function runtime(args) {
    return async (model, context) => {
        var _a, _b, _c;
        let path = path_1.join(model.project.path, args.out);
        let handleExisting = (_a = args.handleExisting, (_a !== null && _a !== void 0 ? _a : 'replace'));
        let runtime = `${_b = args.header, (_b !== null && _b !== void 0 ? _b : '')}`;
        if (model.project.projectDependencies.size) {
            runtime += `
${createImportMap(model, path, model.flags.remapImportSource)}
const mod = require('module');

const original = mod.prototype.require;
mod.prototype.require = function(path, ...args) {
	if (importData[path]) {
		path = importData[path];
		return original.call(module, path, ...args);
	} else {
		return original.call(this, path, ...args);
	}
};
`;
        }
        runtime += `${_c = args.footer, (_c !== null && _c !== void 0 ? _c : '')}`;
        if (await model.fileSystem.exists(path)) {
            let existing;
            switch (handleExisting) {
                case 'append':
                    existing = await model.fileSystem.readFile(path, 'utf8');
                    await model.fileSystem.writeFile(path, `${existing}\n${runtime}`);
                    break;
                case 'replace':
                    await model.fileSystem.writeFile(path, runtime);
                    break;
                case 'prepend':
                    existing = await model.fileSystem.readFile(path, 'utf8');
                    await model.fileSystem.writeFile(path, `${runtime}\n${existing}`);
                    break;
            }
        }
        else {
            await model.fileSystem.writeFile(path, runtime);
        }
        return model;
    };
}
exports.runtime = runtime;
function createImportMap(model, path, remap) {
    const result = [];
    for (const dep of model.project.projectDependencies) {
        if (remap) {
            result.push(`'${dep.resolvedConfig.name}': '${path_1.join(remap, dep.resolvedConfig.name)}'`);
        }
        else {
            result.push(`'${dep.resolvedConfig.name}': '${path_1.relative(path_1.parse(path).dir, dep.path)}'`);
        }
    }
    return `const importData = {${result.join(',')}}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJydW50aW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGF0aF8xID0gcmVxdWlyZShcInBhdGhcIik7XG5mdW5jdGlvbiBydW50aW1lKGFyZ3MpIHtcbiAgICByZXR1cm4gYXN5bmMgKG1vZGVsLCBjb250ZXh0KSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICBsZXQgcGF0aCA9IHBhdGhfMS5qb2luKG1vZGVsLnByb2plY3QucGF0aCwgYXJncy5vdXQpO1xuICAgICAgICBsZXQgaGFuZGxlRXhpc3RpbmcgPSAoX2EgPSBhcmdzLmhhbmRsZUV4aXN0aW5nLCAoX2EgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ3JlcGxhY2UnKSk7XG4gICAgICAgIGxldCBydW50aW1lID0gYCR7X2IgPSBhcmdzLmhlYWRlciwgKF9iICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnKX1gO1xuICAgICAgICBpZiAobW9kZWwucHJvamVjdC5wcm9qZWN0RGVwZW5kZW5jaWVzLnNpemUpIHtcbiAgICAgICAgICAgIHJ1bnRpbWUgKz0gYFxuJHtjcmVhdGVJbXBvcnRNYXAobW9kZWwsIHBhdGgsIG1vZGVsLmZsYWdzLnJlbWFwSW1wb3J0U291cmNlKX1cbmNvbnN0IG1vZCA9IHJlcXVpcmUoJ21vZHVsZScpO1xuXG5jb25zdCBvcmlnaW5hbCA9IG1vZC5wcm90b3R5cGUucmVxdWlyZTtcbm1vZC5wcm90b3R5cGUucmVxdWlyZSA9IGZ1bmN0aW9uKHBhdGgsIC4uLmFyZ3MpIHtcblx0aWYgKGltcG9ydERhdGFbcGF0aF0pIHtcblx0XHRwYXRoID0gaW1wb3J0RGF0YVtwYXRoXTtcblx0XHRyZXR1cm4gb3JpZ2luYWwuY2FsbChtb2R1bGUsIHBhdGgsIC4uLmFyZ3MpO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIHBhdGgsIC4uLmFyZ3MpO1xuXHR9XG59O1xuYDtcbiAgICAgICAgfVxuICAgICAgICBydW50aW1lICs9IGAke19jID0gYXJncy5mb290ZXIsIChfYyAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnJyl9YDtcbiAgICAgICAgaWYgKGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0uZXhpc3RzKHBhdGgpKSB7XG4gICAgICAgICAgICBsZXQgZXhpc3Rpbmc7XG4gICAgICAgICAgICBzd2l0Y2ggKGhhbmRsZUV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXBwZW5kJzpcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcgPSBhd2FpdCBtb2RlbC5maWxlU3lzdGVtLnJlYWRGaWxlKHBhdGgsICd1dGY4Jyk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0ud3JpdGVGaWxlKHBhdGgsIGAke2V4aXN0aW5nfVxcbiR7cnVudGltZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVwbGFjZSc6XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0ud3JpdGVGaWxlKHBhdGgsIHJ1bnRpbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwcmVwZW5kJzpcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcgPSBhd2FpdCBtb2RlbC5maWxlU3lzdGVtLnJlYWRGaWxlKHBhdGgsICd1dGY4Jyk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0ud3JpdGVGaWxlKHBhdGgsIGAke3J1bnRpbWV9XFxuJHtleGlzdGluZ31gKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCBtb2RlbC5maWxlU3lzdGVtLndyaXRlRmlsZShwYXRoLCBydW50aW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgfTtcbn1cbmV4cG9ydHMucnVudGltZSA9IHJ1bnRpbWU7XG5mdW5jdGlvbiBjcmVhdGVJbXBvcnRNYXAobW9kZWwsIHBhdGgsIHJlbWFwKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChjb25zdCBkZXAgb2YgbW9kZWwucHJvamVjdC5wcm9qZWN0RGVwZW5kZW5jaWVzKSB7XG4gICAgICAgIGlmIChyZW1hcCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goYCcke2RlcC5yZXNvbHZlZENvbmZpZy5uYW1lfSc6ICcke3BhdGhfMS5qb2luKHJlbWFwLCBkZXAucmVzb2x2ZWRDb25maWcubmFtZSl9J2ApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goYCcke2RlcC5yZXNvbHZlZENvbmZpZy5uYW1lfSc6ICcke3BhdGhfMS5yZWxhdGl2ZShwYXRoXzEucGFyc2UocGF0aCkuZGlyLCBkZXAucGF0aCl9J2ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBgY29uc3QgaW1wb3J0RGF0YSA9IHske3Jlc3VsdC5qb2luKCcsJyl9fWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljblZ1ZEdsdFpTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSW5KMWJuUnBiV1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3dyUWtGQk5rTTdRVUZETjBNc1UwRkJaMElzVDBGQlR5eERRVUZETEVsQlFVazdTVUZEZUVJc1QwRkJUeXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTEU5QlFVOHNSVUZCUlN4RlFVRkZPMUZCUXpWQ0xFbEJRVWtzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNN1VVRkRaaXhKUVVGSkxFbEJRVWtzUjBGQlJ5eFhRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUXpsRExFbEJRVWtzWTBGQll5eEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF5eEZRVUZGTEV0QlFVc3NTVUZCU1N4SlFVRkpMRVZCUVVVc1MwRkJTeXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEycEhMRWxCUVVrc1QwRkJUeXhIUVVGSExFZEJRVWNzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFdEJRVXNzU1VGQlNTeEpRVUZKTEVWQlFVVXNTMEZCU3l4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRE8xRkJRemxGTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4SlFVRkpMRVZCUVVVN1dVRkRlRU1zVDBGQlR5eEpRVUZKTzBWQlEzSkNMR1ZCUVdVc1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTTdPenM3T3pzN096czdPenREUVZrMVJDeERRVUZETzFOQlEwODdVVUZEUkN4UFFVRlBMRWxCUVVrc1IwRkJSeXhGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1MwRkJTeXhKUVVGSkxFbEJRVWtzUlVGQlJTeExRVUZMTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNN1VVRkRNMFVzU1VGQlNTeE5RVUZOTEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzFsQlEzSkRMRWxCUVVrc1VVRkJVU3hEUVVGRE8xbEJRMklzVVVGQlVTeGpRVUZqTEVWQlFVVTdaMEpCUTNCQ0xFdEJRVXNzVVVGQlVUdHZRa0ZEVkN4UlFVRlJMRWRCUVVjc1RVRkJUU3hMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03YjBKQlEzcEVMRTFCUVUwc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWRCUVVjc1VVRkJVU3hMUVVGTExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTTdiMEpCUTJ4RkxFMUJRVTA3WjBKQlExWXNTMEZCU3l4VFFVRlRPMjlDUVVOV0xFMUJRVTBzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzI5Q1FVTm9SQ3hOUVVGTk8yZENRVU5XTEV0QlFVc3NVMEZCVXp0dlFrRkRWaXhSUVVGUkxFZEJRVWNzVFVGQlRTeExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdiMEpCUTNwRUxFMUJRVTBzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFZEJRVWNzVDBGQlR5eExRVUZMTEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVNN2IwSkJRMnhGTEUxQlFVMDdZVUZEWWp0VFFVTktPMkZCUTBrN1dVRkRSQ3hOUVVGTkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dFRRVU51UkR0UlFVTkVMRTlCUVU4c1MwRkJTeXhEUVVGRE8wbEJRMnBDTEVOQlFVTXNRMEZCUXp0QlFVTk9MRU5CUVVNN1FVRTFRMFFzTUVKQk5FTkRPMEZCUTBRc1UwRkJVeXhsUVVGbExFTkJRVU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxPMGxCUTNaRExFMUJRVTBzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0SlFVTnNRaXhMUVVGTExFMUJRVTBzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVTdVVUZEYWtRc1NVRkJTU3hMUVVGTExFVkJRVVU3V1VGRFVDeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEU5QlFVOHNWMEZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRUUVVNeFJqdGhRVU5KTzFsQlEwUXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4UFFVRlBMR1ZCUVZFc1EwRkJReXhaUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVMEZEZWtZN1MwRkRTanRKUVVORUxFOUJRVThzZFVKQlFYVkNMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXp0QlFVTjBSQ3hEUVVGREluMD0iXX0=