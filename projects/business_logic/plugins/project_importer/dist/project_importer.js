"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const static_analyser_1 = require("static_analyser");
const typescript_1 = require("typescript");
function projectImporter(args) {
    return async (model, context) => {
        context.uiLogger.info(`[${model.project.resolvedConfig.name}]Mapping project imports`);
        model.project.projectDependencies = new Set();
        for (const file of model.input) {
            if (file.endsWith('.ts') || file.endsWith('.tsx') || file.endsWith('.js') || file.endsWith('.jsx')) {
                await findDependencies(file, model);
            }
        }
        return model;
    };
}
exports.projectImporter = projectImporter;
async function findDependencies(file, model) {
    const fm = new static_analyser_1.FileManipulator(await model.fileSystem.readFile(file, 'utf8'));
    fm.queryAst((node) => {
        if (typescript_1.isImportDeclaration(node)) {
            if (node.moduleSpecifier) {
                const moduleName = node.moduleSpecifier.text;
                if (!moduleName.startsWith('.')) {
                    const [name] = moduleName.split('/');
                    const target = model.allProjects.find((p) => p.resolvedConfig.name === name);
                    if (target) {
                        model.project.projectDependencies.add(target);
                    }
                }
            }
            return [];
        }
        else {
            return [];
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RfaW1wb3J0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6InByb2plY3RfaW1wb3J0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzdGF0aWNfYW5hbHlzZXJfMSA9IHJlcXVpcmUoXCJzdGF0aWNfYW5hbHlzZXJcIik7XG5jb25zdCB0eXBlc2NyaXB0XzEgPSByZXF1aXJlKFwidHlwZXNjcmlwdFwiKTtcbmZ1bmN0aW9uIHByb2plY3RJbXBvcnRlcihhcmdzKSB7XG4gICAgcmV0dXJuIGFzeW5jIChtb2RlbCwgY29udGV4dCkgPT4ge1xuICAgICAgICBjb250ZXh0LnVpTG9nZ2VyLmluZm8oYFske21vZGVsLnByb2plY3QucmVzb2x2ZWRDb25maWcubmFtZX1dTWFwcGluZyBwcm9qZWN0IGltcG9ydHNgKTtcbiAgICAgICAgbW9kZWwucHJvamVjdC5wcm9qZWN0RGVwZW5kZW5jaWVzID0gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgbW9kZWwuaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChmaWxlLmVuZHNXaXRoKCcudHMnKSB8fCBmaWxlLmVuZHNXaXRoKCcudHN4JykgfHwgZmlsZS5lbmRzV2l0aCgnLmpzJykgfHwgZmlsZS5lbmRzV2l0aCgnLmpzeCcpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZmluZERlcGVuZGVuY2llcyhmaWxlLCBtb2RlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH07XG59XG5leHBvcnRzLnByb2plY3RJbXBvcnRlciA9IHByb2plY3RJbXBvcnRlcjtcbmFzeW5jIGZ1bmN0aW9uIGZpbmREZXBlbmRlbmNpZXMoZmlsZSwgbW9kZWwpIHtcbiAgICBjb25zdCBmbSA9IG5ldyBzdGF0aWNfYW5hbHlzZXJfMS5GaWxlTWFuaXB1bGF0b3IoYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS5yZWFkRmlsZShmaWxlLCAndXRmOCcpKTtcbiAgICBmbS5xdWVyeUFzdCgobm9kZSkgPT4ge1xuICAgICAgICBpZiAodHlwZXNjcmlwdF8xLmlzSW1wb3J0RGVjbGFyYXRpb24obm9kZSkpIHtcbiAgICAgICAgICAgIGlmIChub2RlLm1vZHVsZVNwZWNpZmllcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZU5hbWUgPSBub2RlLm1vZHVsZVNwZWNpZmllci50ZXh0O1xuICAgICAgICAgICAgICAgIGlmICghbW9kdWxlTmFtZS5zdGFydHNXaXRoKCcuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW25hbWVdID0gbW9kdWxlTmFtZS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBtb2RlbC5hbGxQcm9qZWN0cy5maW5kKChwKSA9PiBwLnJlc29sdmVkQ29uZmlnLm5hbWUgPT09IG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5wcm9qZWN0LnByb2plY3REZXBlbmRlbmNpZXMuYWRkKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNISnZhbVZqZEY5cGJYQnZjblJsY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbkJ5YjJwbFkzUmZhVzF3YjNKMFpYSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeHhSRUZCYTBRN1FVRkRiRVFzTWtOQlFXbEVPMEZCUTJwRUxGTkJRV2RDTEdWQlFXVXNRMEZCUXl4SlFVRkpPMGxCUTJoRExFOUJRVThzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCUVVVc1JVRkJSVHRSUVVNMVFpeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc01FSkJRVEJDTEVOQlFVTXNRMEZCUXp0UlFVTjJSaXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEcxQ1FVRnRRaXhIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZET1VNc1MwRkJTeXhOUVVGTkxFbEJRVWtzU1VGQlNTeExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZPMWxCUXpWQ0xFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJUdG5Ra0ZEYUVjc1RVRkJUU3huUWtGQlowSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03WVVGRGRrTTdVMEZEU2p0UlFVTkVMRTlCUVU4c1MwRkJTeXhEUVVGRE8wbEJRMnBDTEVOQlFVTXNRMEZCUXp0QlFVTk9MRU5CUVVNN1FVRllSQ3d3UTBGWFF6dEJRVU5FTEV0QlFVc3NWVUZCVlN4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3p0SlFVTjJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEdsRFFVRmxMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU01UlN4RlFVRkZMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVTdVVUZEYWtJc1NVRkJTU3huUTBGQmJVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRaUVVNelFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4bFFVRmxMRVZCUVVVN1owSkJRM1JDTEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTTNReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHR2UWtGRE4wSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN2IwSkJRM0pETEUxQlFVMHNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRE4wVXNTVUZCU1N4TlFVRk5MRVZCUVVVN2QwSkJRMUlzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN2NVSkJRMnBFTzJsQ1FVTktPMkZCUTBvN1dVRkRSQ3hQUVVGUExFVkJRVVVzUTBGQlF6dFRRVU5pTzJGQlEwazdXVUZEUkN4UFFVRlBMRVZCUVVVc1EwRkJRenRUUVVOaU8wbEJRMHdzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEVUN4RFFVRkRJbjA9Il19