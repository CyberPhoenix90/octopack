"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const static_analyser_1 = require("static_analyser");
const typescript_1 = require("typescript");
function projectImporter(args) {
    return async (model, context) => {
        context.uiLogger.info(`[${model.project.resolvedConfig.name}]Mapping project imports`);
        for (const file of model.input) {
            if (file.endsWith('.ts') || file.endsWith('.tsx') || file.endsWith('.js') || file.endsWith('.jsx')) {
                await remapImports(file, model);
            }
        }
        return model;
    };
}
exports.projectImporter = projectImporter;
async function remapImports(file, model) {
    const fm = new static_analyser_1.FileManipulator(await model.fileSystem.readFile(file, 'utf8'));
    fm.queryAst((node) => {
        if (typescript_1.isImportDeclaration(node)) {
            if (node.moduleSpecifier) {
                const moduleName = node.moduleSpecifier.text;
                if (!moduleName.startsWith('.')) {
                    const [name] = moduleName.split('/');
                    const target = model.allProjects.find((p) => p.resolvedConfig.name === name);
                    if (target) {
                        model.projectDependencies.add(target);
                    }
                }
            }
            return [];
        }
        else {
            return [];
        }
    });
    fm.applyManipulations();
    await model.fileSystem.writeFile(file, fm.content);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RfaW1wb3J0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoicHJvamVjdF9pbXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHN0YXRpY19hbmFseXNlcl8xID0gcmVxdWlyZShcInN0YXRpY19hbmFseXNlclwiKTtcbmNvbnN0IHR5cGVzY3JpcHRfMSA9IHJlcXVpcmUoXCJ0eXBlc2NyaXB0XCIpO1xuZnVuY3Rpb24gcHJvamVjdEltcG9ydGVyKGFyZ3MpIHtcbiAgICByZXR1cm4gYXN5bmMgKG1vZGVsLCBjb250ZXh0KSA9PiB7XG4gICAgICAgIGNvbnRleHQudWlMb2dnZXIuaW5mbyhgWyR7bW9kZWwucHJvamVjdC5yZXNvbHZlZENvbmZpZy5uYW1lfV1NYXBwaW5nIHByb2plY3QgaW1wb3J0c2ApO1xuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgbW9kZWwuaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChmaWxlLmVuZHNXaXRoKCcudHMnKSB8fCBmaWxlLmVuZHNXaXRoKCcudHN4JykgfHwgZmlsZS5lbmRzV2l0aCgnLmpzJykgfHwgZmlsZS5lbmRzV2l0aCgnLmpzeCcpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcmVtYXBJbXBvcnRzKGZpbGUsIG1vZGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgfTtcbn1cbmV4cG9ydHMucHJvamVjdEltcG9ydGVyID0gcHJvamVjdEltcG9ydGVyO1xuYXN5bmMgZnVuY3Rpb24gcmVtYXBJbXBvcnRzKGZpbGUsIG1vZGVsKSB7XG4gICAgY29uc3QgZm0gPSBuZXcgc3RhdGljX2FuYWx5c2VyXzEuRmlsZU1hbmlwdWxhdG9yKGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0ucmVhZEZpbGUoZmlsZSwgJ3V0ZjgnKSk7XG4gICAgZm0ucXVlcnlBc3QoKG5vZGUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVzY3JpcHRfMS5pc0ltcG9ydERlY2xhcmF0aW9uKG5vZGUpKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5tb2R1bGVTcGVjaWZpZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtb2R1bGVOYW1lID0gbm9kZS5tb2R1bGVTcGVjaWZpZXIudGV4dDtcbiAgICAgICAgICAgICAgICBpZiAoIW1vZHVsZU5hbWUuc3RhcnRzV2l0aCgnLicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtuYW1lXSA9IG1vZHVsZU5hbWUuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gbW9kZWwuYWxsUHJvamVjdHMuZmluZCgocCkgPT4gcC5yZXNvbHZlZENvbmZpZy5uYW1lID09PSBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwucHJvamVjdERlcGVuZGVuY2llcy5hZGQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZtLmFwcGx5TWFuaXB1bGF0aW9ucygpO1xuICAgIGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0ud3JpdGVGaWxlKGZpbGUsIGZtLmNvbnRlbnQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0hKdmFtVmpkRjlwYlhCdmNuUmxjaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYkluQnliMnBsWTNSZmFXMXdiM0owWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4eFJFRkJhMFE3UVVGRGJFUXNNa05CUVdsRU8wRkJRMnBFTEZOQlFXZENMR1ZCUVdVc1EwRkJReXhKUVVGSk8wbEJRMmhETEU5QlFVOHNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVVzUlVGQlJUdFJRVU0xUWl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzTUVKQlFUQkNMRU5CUVVNc1EwRkJRenRSUVVOMlJpeExRVUZMTEUxQlFVMHNTVUZCU1N4SlFVRkpMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVU3V1VGRE5VSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZPMmRDUVVOb1J5eE5RVUZOTEZsQlFWa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03WVVGRGJrTTdVMEZEU2p0UlFVTkVMRTlCUVU4c1MwRkJTeXhEUVVGRE8wbEJRMnBDTEVOQlFVTXNRMEZCUXp0QlFVTk9MRU5CUVVNN1FVRldSQ3d3UTBGVlF6dEJRVU5FTEV0QlFVc3NWVUZCVlN4WlFVRlpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXM3U1VGRGJrTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1NVRkJTU3hwUTBGQlpTeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRPVVVzUlVGQlJTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRk8xRkJRMnBDTEVsQlFVa3NaME5CUVcxQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdXVUZETTBJc1NVRkJTU3hKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTzJkQ1FVTjBRaXhOUVVGTkxGVkJRVlVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJRenRuUWtGRE4wTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVTdiMEpCUXpkQ0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzI5Q1FVTnlReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFdEJRVXNzU1VGQlNTeERRVUZETEVOQlFVTTdiMEpCUXpkRkxFbEJRVWtzVFVGQlRTeEZRVUZGTzNkQ1FVTlNMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03Y1VKQlEzcERPMmxDUVVOS08yRkJRMG83V1VGRFJDeFBRVUZQTEVWQlFVVXNRMEZCUXp0VFFVTmlPMkZCUTBrN1dVRkRSQ3hQUVVGUExFVkJRVVVzUTBGQlF6dFRRVU5pTzBsQlEwd3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRTQ3hGUVVGRkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1EwRkJRenRKUVVONFFpeE5RVUZOTEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRka1FzUTBGQlF5SjkiXX0=