"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const module_transpiler_1 = require("./module_transpiler");
const path_1 = require("path");
function output(args) {
    return async (model, context) => {
        await module_transpiler_1.transpile(model, context);
        const fixedFiles = [];
        const movableFiles = [];
        for (const file of model.output) {
            if (!file.endsWith('.d.ts') && (file.endsWith('.ts') || file.endsWith('.tsx'))) {
                continue;
            }
            if (file.startsWith(path_1.join(model.project.path, model.project.resolvedConfig.build.bundles[model.bundle].output))) {
                fixedFiles.push(file);
            }
            else {
                movableFiles.push(file);
            }
        }
        const base = findLowestCommonFolder(movableFiles);
        for (const file of movableFiles) {
            const newPath = path_1.join(model.project.path, model.project.resolvedConfig.build.bundles[model.bundle].output, path_1.relative(base, file));
            await context.fileSystem.mkdirp(path_1.parse(newPath).dir);
            await context.fileSystem.writeFile(newPath, await model.fileSystem.readFile(file, 'utf8'));
        }
        for (const file of fixedFiles) {
            await context.fileSystem.mkdirp(path_1.parse(file).dir);
            await context.fileSystem.writeFile(file, await model.fileSystem.readFile(file, 'utf8'));
        }
        return model;
    };
}
exports.output = output;
function findLowestCommonFolder(files) {
    if (files.length === 0) {
        return '';
    }
    let candidate = path_1.parse(files[0]).dir;
    for (let i = 1; i < files.length; i++) {
        while (!isChildOf(path_1.parse(files[i]).dir, candidate)) {
            if (candidate === '/') {
                throw new Error('Could not determine common folder between files in compilation');
            }
            candidate = path_1.join(candidate, '..');
        }
    }
    return candidate;
}
function isChildOf(file, folder) {
    while (file !== '/') {
        if (file === folder) {
            return true;
        }
        else {
            file = path_1.join(file, '..');
        }
    }
    return file === folder;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm91dHB1dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJvdXRwdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtb2R1bGVfdHJhbnNwaWxlcl8xID0gcmVxdWlyZShcIi4vbW9kdWxlX3RyYW5zcGlsZXJcIik7XG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcbmZ1bmN0aW9uIG91dHB1dChhcmdzKSB7XG4gICAgcmV0dXJuIGFzeW5jIChtb2RlbCwgY29udGV4dCkgPT4ge1xuICAgICAgICBhd2FpdCBtb2R1bGVfdHJhbnNwaWxlcl8xLnRyYW5zcGlsZShtb2RlbCwgY29udGV4dCk7XG4gICAgICAgIGNvbnN0IGZpeGVkRmlsZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbW92YWJsZUZpbGVzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBtb2RlbC5vdXRwdXQpIHtcbiAgICAgICAgICAgIGlmICghZmlsZS5lbmRzV2l0aCgnLmQudHMnKSAmJiAoZmlsZS5lbmRzV2l0aCgnLnRzJykgfHwgZmlsZS5lbmRzV2l0aCgnLnRzeCcpKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpbGUuc3RhcnRzV2l0aChwYXRoXzEuam9pbihtb2RlbC5wcm9qZWN0LnBhdGgsIG1vZGVsLnByb2plY3QucmVzb2x2ZWRDb25maWcuYnVpbGQuYnVuZGxlc1ttb2RlbC5idW5kbGVdLm91dHB1dCkpKSB7XG4gICAgICAgICAgICAgICAgZml4ZWRGaWxlcy5wdXNoKGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbW92YWJsZUZpbGVzLnB1c2goZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmFzZSA9IGZpbmRMb3dlc3RDb21tb25Gb2xkZXIobW92YWJsZUZpbGVzKTtcbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIG1vdmFibGVGaWxlcykge1xuICAgICAgICAgICAgY29uc3QgbmV3UGF0aCA9IHBhdGhfMS5qb2luKG1vZGVsLnByb2plY3QucGF0aCwgbW9kZWwucHJvamVjdC5yZXNvbHZlZENvbmZpZy5idWlsZC5idW5kbGVzW21vZGVsLmJ1bmRsZV0ub3V0cHV0LCBwYXRoXzEucmVsYXRpdmUoYmFzZSwgZmlsZSkpO1xuICAgICAgICAgICAgYXdhaXQgY29udGV4dC5maWxlU3lzdGVtLm1rZGlycChwYXRoXzEucGFyc2UobmV3UGF0aCkuZGlyKTtcbiAgICAgICAgICAgIGF3YWl0IGNvbnRleHQuZmlsZVN5c3RlbS53cml0ZUZpbGUobmV3UGF0aCwgYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS5yZWFkRmlsZShmaWxlLCAndXRmOCcpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZml4ZWRGaWxlcykge1xuICAgICAgICAgICAgYXdhaXQgY29udGV4dC5maWxlU3lzdGVtLm1rZGlycChwYXRoXzEucGFyc2UoZmlsZSkuZGlyKTtcbiAgICAgICAgICAgIGF3YWl0IGNvbnRleHQuZmlsZVN5c3RlbS53cml0ZUZpbGUoZmlsZSwgYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS5yZWFkRmlsZShmaWxlLCAndXRmOCcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgfTtcbn1cbmV4cG9ydHMub3V0cHV0ID0gb3V0cHV0O1xuZnVuY3Rpb24gZmluZExvd2VzdENvbW1vbkZvbGRlcihmaWxlcykge1xuICAgIGlmIChmaWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBsZXQgY2FuZGlkYXRlID0gcGF0aF8xLnBhcnNlKGZpbGVzWzBdKS5kaXI7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB3aGlsZSAoIWlzQ2hpbGRPZihwYXRoXzEucGFyc2UoZmlsZXNbaV0pLmRpciwgY2FuZGlkYXRlKSkge1xuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSA9PT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZGV0ZXJtaW5lIGNvbW1vbiBmb2xkZXIgYmV0d2VlbiBmaWxlcyBpbiBjb21waWxhdGlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FuZGlkYXRlID0gcGF0aF8xLmpvaW4oY2FuZGlkYXRlLCAnLi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FuZGlkYXRlO1xufVxuZnVuY3Rpb24gaXNDaGlsZE9mKGZpbGUsIGZvbGRlcikge1xuICAgIHdoaWxlIChmaWxlICE9PSAnLycpIHtcbiAgICAgICAgaWYgKGZpbGUgPT09IGZvbGRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmaWxlID0gcGF0aF8xLmpvaW4oZmlsZSwgJy4uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbGUgPT09IGZvbGRlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWIzVjBjSFYwTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2liM1YwY0hWMExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc01rUkJRV2RFTzBGQlEyaEVMQ3RDUVVFMlF6dEJRVU0zUXl4VFFVRm5RaXhOUVVGTkxFTkJRVU1zU1VGQlNUdEpRVU4yUWl4UFFVRlBMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGTEVWQlFVVTdVVUZETlVJc1RVRkJUU3cyUWtGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVOb1F5eE5RVUZOTEZWQlFWVXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRkRUlzVFVGQlRTeFpRVUZaTEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTNoQ0xFdEJRVXNzVFVGQlRTeEpRVUZKTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSVHRaUVVNM1FpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhGUVVGRk8yZENRVU0xUlN4VFFVRlRPMkZCUTFvN1dVRkRSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNWMEZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVWQlFVVTdaMEpCUXpWSExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1lVRkRla0k3YVVKQlEwazdaMEpCUTBRc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0aFFVTXpRanRUUVVOS08xRkJRMFFzVFVGQlRTeEpRVUZKTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdVVUZEYkVRc1MwRkJTeXhOUVVGTkxFbEJRVWtzU1VGQlNTeFpRVUZaTEVWQlFVVTdXVUZETjBJc1RVRkJUU3hQUVVGUExFZEJRVWNzVjBGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hsUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRhRWtzVFVGQlRTeFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhaUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRjRVFzVFVGQlRTeFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTTVSanRSUVVORUxFdEJRVXNzVFVGQlRTeEpRVUZKTEVsQlFVa3NWVUZCVlN4RlFVRkZPMWxCUXpOQ0xFMUJRVTBzVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1dVRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTJwRUxFMUJRVTBzVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdVMEZETTBZN1VVRkRSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dEpRVU5xUWl4RFFVRkRMRU5CUVVNN1FVRkRUaXhEUVVGRE8wRkJOVUpFTEhkQ1FUUkNRenRCUVVORUxGTkJRVk1zYzBKQlFYTkNMRU5CUVVNc1MwRkJTenRKUVVOcVF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhGUVVGRk8xRkJRM0JDTEU5QlFVOHNSVUZCUlN4RFFVRkRPMHRCUTJJN1NVRkRSQ3hKUVVGSkxGTkJRVk1zUjBGQlJ5eFpRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETzBsQlEzQkRMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzFGQlEyNURMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zV1VGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeFRRVUZUTEVOQlFVTXNSVUZCUlR0WlFVTXZReXhKUVVGSkxGTkJRVk1zUzBGQlN5eEhRVUZITEVWQlFVVTdaMEpCUTI1Q0xFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNaMFZCUVdkRkxFTkJRVU1zUTBGQlF6dGhRVU55Ump0WlFVTkVMRk5CUVZNc1IwRkJSeXhYUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMU5CUTNKRE8wdEJRMG83U1VGRFJDeFBRVUZQTEZOQlFWTXNRMEZCUXp0QlFVTnlRaXhEUVVGRE8wRkJRMFFzVTBGQlV5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwN1NVRkRNMElzVDBGQlR5eEpRVUZKTEV0QlFVc3NSMEZCUnl4RlFVRkZPMUZCUTJwQ0xFbEJRVWtzU1VGQlNTeExRVUZMTEUxQlFVMHNSVUZCUlR0WlFVTnFRaXhQUVVGUExFbEJRVWtzUTBGQlF6dFRRVU5tTzJGQlEwazdXVUZEUkN4SlFVRkpMRWRCUVVjc1YwRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0VFFVTXpRanRMUVVOS08wbEJRMFFzVDBGQlR5eEpRVUZKTEV0QlFVc3NUVUZCVFN4RFFVRkRPMEZCUXpOQ0xFTkJRVU1pZlE9PSJdfQ==