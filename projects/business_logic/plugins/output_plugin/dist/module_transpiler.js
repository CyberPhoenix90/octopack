"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const combine = require("combine-source-map");
const convert_source_map_1 = require("convert-source-map");
const ts = require("typescript");
async function transpile(model, context) {
    for (const file of model.output) {
        if (file.includes('js')) {
            const originalContent = await model.fileSystem.readFile(file, 'utf8');
            let content;
            let mappedFile;
            const sourceMapIndex = originalContent.indexOf('\n//# sourceMappingURL=');
            if (sourceMapIndex !== -1) {
                content = originalContent.substring(0, sourceMapIndex);
                mappedFile = convert_source_map_1.fromComment(originalContent.substring(sourceMapIndex + 1)).toObject().file;
            }
            else {
                content = originalContent;
            }
            const output = ts.transpileModule(content, {
                compilerOptions: {
                    target: ts.ScriptTarget.ESNext,
                    module: model.project.resolvedConfig.platform === 'browser'
                        ? ts.ModuleKind.UMD
                        : ts.ModuleKind.CommonJS,
                    inlineSourceMap: true
                },
                fileName: file
            });
            if (output.outputText) {
                let result = output.outputText.substring(0, output.outputText.indexOf('\n//# sourceMappingURL='));
                if (sourceMapIndex !== -1) {
                    result +=
                        '\n' +
                            combine
                                .create(mappedFile)
                                .addFile({
                                source: originalContent,
                                sourceFile: mappedFile
                            })
                                .addFile({ source: output.outputText, sourceFile: mappedFile })
                                .comment();
                }
                await model.fileSystem.writeFile(file, result);
            }
            else {
                for (const diagnostic of output.diagnostics) {
                    const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
                    const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                    context.uiLogger.error(`[${model.project.resolvedConfig.name}]${diagnostic.file.fileName} (${line + 1},${character +
                        1}): ${message}`);
                }
            }
        }
    }
}
exports.transpile = transpile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZV90cmFuc3BpbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im1vZHVsZV90cmFuc3BpbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29tYmluZSA9IHJlcXVpcmUoXCJjb21iaW5lLXNvdXJjZS1tYXBcIik7XG5jb25zdCBjb252ZXJ0X3NvdXJjZV9tYXBfMSA9IHJlcXVpcmUoXCJjb252ZXJ0LXNvdXJjZS1tYXBcIik7XG5jb25zdCB0cyA9IHJlcXVpcmUoXCJ0eXBlc2NyaXB0XCIpO1xuYXN5bmMgZnVuY3Rpb24gdHJhbnNwaWxlKG1vZGVsLCBjb250ZXh0KSB7XG4gICAgZm9yIChjb25zdCBmaWxlIG9mIG1vZGVsLm91dHB1dCkge1xuICAgICAgICBpZiAoZmlsZS5pbmNsdWRlcygnanMnKSkge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxDb250ZW50ID0gYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS5yZWFkRmlsZShmaWxlLCAndXRmOCcpO1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQ7XG4gICAgICAgICAgICBsZXQgbWFwcGVkRmlsZTtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZU1hcEluZGV4ID0gb3JpZ2luYWxDb250ZW50LmluZGV4T2YoJ1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPScpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZU1hcEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBvcmlnaW5hbENvbnRlbnQuc3Vic3RyaW5nKDAsIHNvdXJjZU1hcEluZGV4KTtcbiAgICAgICAgICAgICAgICBtYXBwZWRGaWxlID0gY29udmVydF9zb3VyY2VfbWFwXzEuZnJvbUNvbW1lbnQob3JpZ2luYWxDb250ZW50LnN1YnN0cmluZyhzb3VyY2VNYXBJbmRleCArIDEpKS50b09iamVjdCgpLmZpbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gb3JpZ2luYWxDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gdHMudHJhbnNwaWxlTW9kdWxlKGNvbnRlbnQsIHtcbiAgICAgICAgICAgICAgICBjb21waWxlck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0cy5TY3JpcHRUYXJnZXQuRVNOZXh0LFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGU6IG1vZGVsLnByb2plY3QucmVzb2x2ZWRDb25maWcucGxhdGZvcm0gPT09ICdicm93c2VyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cy5Nb2R1bGVLaW5kLlVNRFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0cy5Nb2R1bGVLaW5kLkNvbW1vbkpTLFxuICAgICAgICAgICAgICAgICAgICBpbmxpbmVTb3VyY2VNYXA6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBmaWxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChvdXRwdXQub3V0cHV0VGV4dCkge1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBvdXRwdXQub3V0cHV0VGV4dC5zdWJzdHJpbmcoMCwgb3V0cHV0Lm91dHB1dFRleHQuaW5kZXhPZignXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JykpO1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VNYXBJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9XG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tYmluZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY3JlYXRlKG1hcHBlZEZpbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRGaWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBvcmlnaW5hbENvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUZpbGU6IG1hcHBlZEZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkRmlsZSh7IHNvdXJjZTogb3V0cHV0Lm91dHB1dFRleHQsIHNvdXJjZUZpbGU6IG1hcHBlZEZpbGUgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbW1lbnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgbW9kZWwuZmlsZVN5c3RlbS53cml0ZUZpbGUoZmlsZSwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGlhZ25vc3RpYyBvZiBvdXRwdXQuZGlhZ25vc3RpY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBsaW5lLCBjaGFyYWN0ZXIgfSA9IGRpYWdub3N0aWMuZmlsZS5nZXRMaW5lQW5kQ2hhcmFjdGVyT2ZQb3NpdGlvbihkaWFnbm9zdGljLnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRzLmZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHQoZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCwgJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnVpTG9nZ2VyLmVycm9yKGBbJHttb2RlbC5wcm9qZWN0LnJlc29sdmVkQ29uZmlnLm5hbWV9XSR7ZGlhZ25vc3RpYy5maWxlLmZpbGVOYW1lfSAoJHtsaW5lICsgMX0sJHtjaGFyYWN0ZXIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgMX0pOiAke21lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy50cmFuc3BpbGUgPSB0cmFuc3BpbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2liVzlrZFd4bFgzUnlZVzV6Y0dsc1pYSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKdGIyUjFiR1ZmZEhKaGJuTndhV3hsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTERoRFFVRTRRenRCUVVNNVF5d3lSRUZCYVVRN1FVRkRha1FzYVVOQlFXbERPMEZCUXpGQ0xFdEJRVXNzVlVGQlZTeFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTlCUVU4N1NVRkRNVU1zUzBGQlN5eE5RVUZOTEVsQlFVa3NTVUZCU1N4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRk8xRkJRemRDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJUdFpRVU55UWl4TlFVRk5MR1ZCUVdVc1IwRkJSeXhOUVVGTkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dFpRVU4wUlN4SlFVRkpMRTlCUVU4c1EwRkJRenRaUVVOYUxFbEJRVWtzVlVGQlZTeERRVUZETzFsQlEyWXNUVUZCVFN4alFVRmpMRWRCUVVjc1pVRkJaU3hEUVVGRExFOUJRVThzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhEUVVGRE8xbEJRekZGTEVsQlFVa3NZMEZCWXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRk8yZENRVU4yUWl4UFFVRlBMRWRCUVVjc1pVRkJaU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVWQlFVVXNZMEZCWXl4RFFVRkRMRU5CUVVNN1owSkJRM1pFTEZWQlFWVXNSMEZCUnl4blEwRkJWeXhEUVVGRExHVkJRV1VzUTBGQlF5eFRRVUZUTEVOQlFVTXNZMEZCWXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRPMkZCUXpOR08ybENRVU5KTzJkQ1FVTkVMRTlCUVU4c1IwRkJSeXhsUVVGbExFTkJRVU03WVVGRE4wSTdXVUZEUkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFVOHNSVUZCUlR0blFrRkRka01zWlVGQlpTeEZRVUZGTzI5Q1FVTmlMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zV1VGQldTeERRVUZETEUxQlFVMDdiMEpCUXpsQ0xFMUJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJReXhSUVVGUkxFdEJRVXNzVTBGQlV6dDNRa0ZEZGtRc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnp0M1FrRkRia0lzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1VVRkJVVHR2UWtGRE5VSXNaVUZCWlN4RlFVRkZMRWxCUVVrN2FVSkJRM2hDTzJkQ1FVTkVMRkZCUVZFc1JVRkJSU3hKUVVGSk8yRkJRMnBDTEVOQlFVTXNRMEZCUXp0WlFVTklMRWxCUVVrc1RVRkJUU3hEUVVGRExGVkJRVlVzUlVGQlJUdG5Ra0ZEYmtJc1NVRkJTU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhGUVVGRkxFMUJRVTBzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRiRWNzU1VGQlNTeGpRVUZqTEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVN2IwSkJRM1pDTEUxQlFVMDdkMEpCUTBZc1NVRkJTVHMwUWtGRFFTeFBRVUZQTzJsRFFVTkdMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU03YVVOQlEyeENMRTlCUVU4c1EwRkJRenRuUTBGRFZDeE5RVUZOTEVWQlFVVXNaVUZCWlR0blEwRkRka0lzVlVGQlZTeEZRVUZGTEZWQlFWVTdOa0pCUTNwQ0xFTkJRVU03YVVOQlEwY3NUMEZCVHl4RFFVRkRMRVZCUVVVc1RVRkJUU3hGUVVGRkxFMUJRVTBzUTBGQlF5eFZRVUZWTEVWQlFVVXNWVUZCVlN4RlFVRkZMRlZCUVZVc1JVRkJSU3hEUVVGRE8ybERRVU01UkN4UFFVRlBMRVZCUVVVc1EwRkJRenRwUWtGRE1VSTdaMEpCUTBRc1RVRkJUU3hMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03WVVGRGJFUTdhVUpCUTBrN1owSkJRMFFzUzBGQlN5eE5RVUZOTEZWQlFWVXNTVUZCU1N4TlFVRk5MRU5CUVVNc1YwRkJWeXhGUVVGRk8yOUNRVU42UXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRkxGTkJRVk1zUlVGQlJTeEhRVUZITEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc05rSkJRVFpDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8yOUNRVU0xUml4TlFVRk5MRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc1ZVRkJWU3hEUVVGRExGZEJRVmNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRPVVVzVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEV0QlFVc3NTVUZCU1N4SFFVRkhMRU5CUVVNc1NVRkJTU3hUUVVGVE8zZENRVU01Unl4RFFVRkRMRTFCUVUwc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF6dHBRa0ZEZWtJN1lVRkRTanRUUVVOS08wdEJRMG83UVVGRFRDeERRVUZETzBGQmJFUkVMRGhDUVd0RVF5SjkiXX0=