"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const combine = require("combine-source-map");
const convert_source_map_1 = require("convert-source-map");
const ts = require("typescript");
async function transpile(model, context) {
    for (const file of model.output) {
        if (file.includes('js')) {
            const originalContent = await model.fileSystem.readFile(file, 'utf8');
            let content;
            let mappedFile;
            const sourceMapIndex = originalContent.indexOf('\n//# sourceMappingURL=');
            if (sourceMapIndex !== -1) {
                content = originalContent.substring(0, sourceMapIndex);
                mappedFile = convert_source_map_1.fromComment(originalContent.substring(sourceMapIndex + 1)).toObject().file;
            }
            else {
                content = originalContent;
            }
            const output = ts.transpileModule(content, {
                compilerOptions: {
                    target: ts.ScriptTarget.ESNext,
                    module: ts.ModuleKind.CommonJS,
                    inlineSourceMap: true
                },
                fileName: file
            });
            if (output.outputText) {
                let result = output.outputText.substring(0, output.outputText.indexOf('\n//# sourceMappingURL='));
                if (sourceMapIndex !== -1) {
                    result +=
                        '\n' +
                            combine
                                .create(mappedFile)
                                .addFile({
                                source: originalContent,
                                sourceFile: mappedFile
                            })
                                .addFile({ source: output.outputText, sourceFile: mappedFile })
                                .comment();
                }
                await model.fileSystem.writeFile(file, result);
            }
            else {
                for (const diagnostic of output.diagnostics) {
                    const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
                    const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                    context.uiLogger.error(`[${model.project.resolvedConfig.name}]${diagnostic.file.fileName} (${line + 1},${character +
                        1}): ${message}`);
                }
            }
        }
    }
}
exports.transpile = transpile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZV90cmFuc3BpbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibW9kdWxlX3RyYW5zcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb21iaW5lID0gcmVxdWlyZShcImNvbWJpbmUtc291cmNlLW1hcFwiKTtcbmNvbnN0IGNvbnZlcnRfc291cmNlX21hcF8xID0gcmVxdWlyZShcImNvbnZlcnQtc291cmNlLW1hcFwiKTtcbmNvbnN0IHRzID0gcmVxdWlyZShcInR5cGVzY3JpcHRcIik7XG5hc3luYyBmdW5jdGlvbiB0cmFuc3BpbGUobW9kZWwsIGNvbnRleHQpIHtcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgbW9kZWwub3V0cHV0KSB7XG4gICAgICAgIGlmIChmaWxlLmluY2x1ZGVzKCdqcycpKSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSBhd2FpdCBtb2RlbC5maWxlU3lzdGVtLnJlYWRGaWxlKGZpbGUsICd1dGY4Jyk7XG4gICAgICAgICAgICBsZXQgY29udGVudDtcbiAgICAgICAgICAgIGxldCBtYXBwZWRGaWxlO1xuICAgICAgICAgICAgY29uc3Qgc291cmNlTWFwSW5kZXggPSBvcmlnaW5hbENvbnRlbnQuaW5kZXhPZignXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Jyk7XG4gICAgICAgICAgICBpZiAoc291cmNlTWFwSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IG9yaWdpbmFsQ29udGVudC5zdWJzdHJpbmcoMCwgc291cmNlTWFwSW5kZXgpO1xuICAgICAgICAgICAgICAgIG1hcHBlZEZpbGUgPSBjb252ZXJ0X3NvdXJjZV9tYXBfMS5mcm9tQ29tbWVudChvcmlnaW5hbENvbnRlbnQuc3Vic3RyaW5nKHNvdXJjZU1hcEluZGV4ICsgMSkpLnRvT2JqZWN0KCkuZmlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBvcmlnaW5hbENvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSB0cy50cmFuc3BpbGVNb2R1bGUoY29udGVudCwge1xuICAgICAgICAgICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRzLlNjcmlwdFRhcmdldC5FU05leHQsXG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZTogdHMuTW9kdWxlS2luZC5Db21tb25KUyxcbiAgICAgICAgICAgICAgICAgICAgaW5saW5lU291cmNlTWFwOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogZmlsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAob3V0cHV0Lm91dHB1dFRleHQpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gb3V0cHV0Lm91dHB1dFRleHQuc3Vic3RyaW5nKDAsIG91dHB1dC5vdXRwdXRUZXh0LmluZGV4T2YoJ1xcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPScpKTtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlTWFwSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPVxuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbWJpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNyZWF0ZShtYXBwZWRGaWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkRmlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWxDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VGaWxlOiBtYXBwZWRGaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZEZpbGUoeyBzb3VyY2U6IG91dHB1dC5vdXRwdXRUZXh0LCBzb3VyY2VGaWxlOiBtYXBwZWRGaWxlIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb21tZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IG1vZGVsLmZpbGVTeXN0ZW0ud3JpdGVGaWxlKGZpbGUsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRpYWdub3N0aWMgb2Ygb3V0cHV0LmRpYWdub3N0aWNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGluZSwgY2hhcmFjdGVyIH0gPSBkaWFnbm9zdGljLmZpbGUuZ2V0TGluZUFuZENoYXJhY3Rlck9mUG9zaXRpb24oZGlhZ25vc3RpYy5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0cy5mbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0KGRpYWdub3N0aWMubWVzc2FnZVRleHQsICdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC51aUxvZ2dlci5lcnJvcihgWyR7bW9kZWwucHJvamVjdC5yZXNvbHZlZENvbmZpZy5uYW1lfV0ke2RpYWdub3N0aWMuZmlsZS5maWxlTmFtZX0gKCR7bGluZSArIDF9LCR7Y2hhcmFjdGVyICtcbiAgICAgICAgICAgICAgICAgICAgICAgIDF9KTogJHttZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMudHJhbnNwaWxlID0gdHJhbnNwaWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYlc5a2RXeGxYM1J5WVc1emNHbHNaWEl1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnRiMlIxYkdWZmRISmhibk53YVd4bGNpNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxEaERRVUU0UXp0QlFVTTVReXd5UkVGQmFVUTdRVUZEYWtRc2FVTkJRV2xETzBGQlF6RkNMRXRCUVVzc1ZVRkJWU3hUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEU5QlFVODdTVUZETVVNc1MwRkJTeXhOUVVGTkxFbEJRVWtzU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZPMUZCUXpkQ0xFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRaUVVOeVFpeE5RVUZOTEdWQlFXVXNSMEZCUnl4TlFVRk5MRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRaUVVOMFJTeEpRVUZKTEU5QlFVOHNRMEZCUXp0WlFVTmFMRWxCUVVrc1ZVRkJWU3hEUVVGRE8xbEJRMllzVFVGQlRTeGpRVUZqTEVkQlFVY3NaVUZCWlN4RFFVRkRMRTlCUVU4c1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4RFFVRkRPMWxCUXpGRkxFbEJRVWtzWTBGQll5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZPMmRDUVVOMlFpeFBRVUZQTEVkQlFVY3NaVUZCWlN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFVkJRVVVzWTBGQll5eERRVUZETEVOQlFVTTdaMEpCUTNaRUxGVkJRVlVzUjBGQlJ5eG5RMEZCVnl4RFFVRkRMR1ZCUVdVc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQll5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETzJGQlF6TkdPMmxDUVVOSk8yZENRVU5FTEU5QlFVOHNSMEZCUnl4bFFVRmxMRU5CUVVNN1lVRkROMEk3V1VGRFJDeE5RVUZOTEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVThzUlVGQlJUdG5Ra0ZEZGtNc1pVRkJaU3hGUVVGRk8yOUNRVU5pTEUxQlFVMHNSVUZCUlN4RlFVRkZMRU5CUVVNc1dVRkJXU3hEUVVGRExFMUJRVTA3YjBKQlF6bENMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zVlVGQlZTeERRVUZETEZGQlFWRTdiMEpCUXpsQ0xHVkJRV1VzUlVGQlJTeEpRVUZKTzJsQ1FVTjRRanRuUWtGRFJDeFJRVUZSTEVWQlFVVXNTVUZCU1R0aFFVTnFRaXhEUVVGRExFTkJRVU03V1VGRFNDeEpRVUZKTEUxQlFVMHNRMEZCUXl4VlFVRlZMRVZCUVVVN1owSkJRMjVDTEVsQlFVa3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNSVUZCUlN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEyeEhMRWxCUVVrc1kwRkJZeXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTzI5Q1FVTjJRaXhOUVVGTk8zZENRVU5HTEVsQlFVazdORUpCUTBFc1QwRkJUenRwUTBGRFJpeE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRPMmxEUVVOc1FpeFBRVUZQTEVOQlFVTTdaME5CUTFRc1RVRkJUU3hGUVVGRkxHVkJRV1U3WjBOQlEzWkNMRlZCUVZVc1JVRkJSU3hWUVVGVk96WkNRVU42UWl4RFFVRkRPMmxEUVVOSExFOUJRVThzUTBGQlF5eEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hGUVVGRkxGVkJRVlVzUlVGQlJTeFZRVUZWTEVWQlFVVXNRMEZCUXp0cFEwRkRPVVFzVDBGQlR5eEZRVUZGTEVOQlFVTTdhVUpCUXpGQ08yZENRVU5FTEUxQlFVMHNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMkZCUTJ4RU8ybENRVU5KTzJkQ1FVTkVMRXRCUVVzc1RVRkJUU3hWUVVGVkxFbEJRVWtzVFVGQlRTeERRVUZETEZkQlFWY3NSVUZCUlR0dlFrRkRla01zVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVc1IwRkJSeXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETERaQ1FVRTJRaXhEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0dlFrRkROVVlzVFVGQlRTeFBRVUZQTEVkQlFVY3NSVUZCUlN4RFFVRkRMRFJDUVVFMFFpeERRVUZETEZWQlFWVXNRMEZCUXl4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03YjBKQlF6bEZMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeEpRVUZKTEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hMUVVGTExFbEJRVWtzUjBGQlJ5eERRVUZETEVsQlFVa3NVMEZCVXp0M1FrRkRPVWNzUTBGQlF5eE5RVUZOTEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNN2FVSkJRM3BDTzJGQlEwbzdVMEZEU2p0TFFVTktPMEZCUTB3c1EwRkJRenRCUVdoRVJDdzRRa0ZuUkVNaWZRPT0iXX0=