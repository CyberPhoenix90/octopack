"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const utilities_1 = require("utilities");
exports.OCTOPACK_CONFIG_FILE_NAME = 'octopack.js';
async function findConfiguration(cwd, fileSystem) {
    const segments = cwd.split('/');
    while (segments.length) {
        const path = segments.join('/');
        if (await fileSystem.exists(path_1.join(path, exports.OCTOPACK_CONFIG_FILE_NAME))) {
            return { config: await loadConfig(path, fileSystem), directory: path };
        }
        else {
            segments.pop();
        }
    }
    return { directory: '/', config: undefined };
}
exports.findConfiguration = findConfiguration;
function resolveConfig(configs) {
    return utilities_1.objectUtils.deepAssign({
        assembly: undefined,
        platform: undefined,
        build: undefined,
        configVersion: undefined,
        name: undefined,
        scope: undefined
    }, configs.solution, configs.workspace, configs.project);
}
exports.resolveConfig = resolveConfig;
async function loadConfig(path, fileSystem) {
    const config = await fileSystem.import(path_1.join(path, exports.OCTOPACK_CONFIG_FILE_NAME));
    if (!config && !config.default) {
        throw new Error(`Invalid octopack configuration at ${path}. No configuration returned`);
    }
    // telling typescript to ignore this because we normalize the object
    if (config.default) {
        //@ts-ignore
        config = config.default;
    }
    return config;
}
exports.loadConfig = loadConfig;
function getBundle(config, candidates) {
    const bundles = Object.keys(config.build.bundles);
    let defaultBundle;
    for (const bundle of bundles) {
        if (candidates[bundle] === true) {
            return bundle;
        }
        if (config.build.bundles[bundle].default) {
            defaultBundle = bundle;
        }
    }
    if (defaultBundle) {
        return defaultBundle;
    }
    else if (bundles.length === 1) {
        return bundles[0];
    }
    else {
        return undefined;
    }
}
exports.getBundle = getBundle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ19yZXNvbHZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiY29uZmlnX3Jlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGF0aF8xID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCJ1dGlsaXRpZXNcIik7XG5leHBvcnRzLk9DVE9QQUNLX0NPTkZJR19GSUxFX05BTUUgPSAnb2N0b3BhY2suanMnO1xuYXN5bmMgZnVuY3Rpb24gZmluZENvbmZpZ3VyYXRpb24oY3dkLCBmaWxlU3lzdGVtKSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBjd2Quc3BsaXQoJy8nKTtcbiAgICB3aGlsZSAoc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBzZWdtZW50cy5qb2luKCcvJyk7XG4gICAgICAgIGlmIChhd2FpdCBmaWxlU3lzdGVtLmV4aXN0cyhwYXRoXzEuam9pbihwYXRoLCBleHBvcnRzLk9DVE9QQUNLX0NPTkZJR19GSUxFX05BTUUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgY29uZmlnOiBhd2FpdCBsb2FkQ29uZmlnKHBhdGgsIGZpbGVTeXN0ZW0pLCBkaXJlY3Rvcnk6IHBhdGggfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlZ21lbnRzLnBvcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGRpcmVjdG9yeTogJy8nLCBjb25maWc6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0cy5maW5kQ29uZmlndXJhdGlvbiA9IGZpbmRDb25maWd1cmF0aW9uO1xuZnVuY3Rpb24gcmVzb2x2ZUNvbmZpZyhjb25maWdzKSB7XG4gICAgcmV0dXJuIHV0aWxpdGllc18xLm9iamVjdFV0aWxzLmRlZXBBc3NpZ24oe1xuICAgICAgICBhc3NlbWJseTogdW5kZWZpbmVkLFxuICAgICAgICBwbGF0Zm9ybTogdW5kZWZpbmVkLFxuICAgICAgICBidWlsZDogdW5kZWZpbmVkLFxuICAgICAgICBjb25maWdWZXJzaW9uOiB1bmRlZmluZWQsXG4gICAgICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgc2NvcGU6IHVuZGVmaW5lZFxuICAgIH0sIGNvbmZpZ3Muc29sdXRpb24sIGNvbmZpZ3Mud29ya3NwYWNlLCBjb25maWdzLnByb2plY3QpO1xufVxuZXhwb3J0cy5yZXNvbHZlQ29uZmlnID0gcmVzb2x2ZUNvbmZpZztcbmFzeW5jIGZ1bmN0aW9uIGxvYWRDb25maWcocGF0aCwgZmlsZVN5c3RlbSkge1xuICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGZpbGVTeXN0ZW0uaW1wb3J0KHBhdGhfMS5qb2luKHBhdGgsIGV4cG9ydHMuT0NUT1BBQ0tfQ09ORklHX0ZJTEVfTkFNRSkpO1xuICAgIGlmICghY29uZmlnICYmICFjb25maWcuZGVmYXVsdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgb2N0b3BhY2sgY29uZmlndXJhdGlvbiBhdCAke3BhdGh9LiBObyBjb25maWd1cmF0aW9uIHJldHVybmVkYCk7XG4gICAgfVxuICAgIC8vIHRlbGxpbmcgdHlwZXNjcmlwdCB0byBpZ25vcmUgdGhpcyBiZWNhdXNlIHdlIG5vcm1hbGl6ZSB0aGUgb2JqZWN0XG4gICAgaWYgKGNvbmZpZy5kZWZhdWx0KSB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICBjb25maWcgPSBjb25maWcuZGVmYXVsdDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbmV4cG9ydHMubG9hZENvbmZpZyA9IGxvYWRDb25maWc7XG5mdW5jdGlvbiBnZXRCdW5kbGUoY29uZmlnLCBjYW5kaWRhdGVzKSB7XG4gICAgY29uc3QgYnVuZGxlcyA9IE9iamVjdC5rZXlzKGNvbmZpZy5idWlsZC5idW5kbGVzKTtcbiAgICBsZXQgZGVmYXVsdEJ1bmRsZTtcbiAgICBmb3IgKGNvbnN0IGJ1bmRsZSBvZiBidW5kbGVzKSB7XG4gICAgICAgIGlmIChjYW5kaWRhdGVzW2J1bmRsZV0gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBidW5kbGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5idWlsZC5idW5kbGVzW2J1bmRsZV0uZGVmYXVsdCkge1xuICAgICAgICAgICAgZGVmYXVsdEJ1bmRsZSA9IGJ1bmRsZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGVmYXVsdEJ1bmRsZSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdEJ1bmRsZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYnVuZGxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGJ1bmRsZXNbMF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0QnVuZGxlID0gZ2V0QnVuZGxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTI5dVptbG5YM0psYzI5c2RtVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaVkyOXVabWxuWDNKbGMyOXNkbVZ5TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzSzBKQlFUUkNPMEZCUXpWQ0xIbERRVUYzUXp0QlFVTXpRaXhSUVVGQkxIbENRVUY1UWl4SFFVRkhMR0ZCUVdFc1EwRkJRenRCUVVOb1JDeExRVUZMTEZWQlFWVXNhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEZWQlFWVTdTVUZEYmtRc1RVRkJUU3hSUVVGUkxFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOb1F5eFBRVUZQTEZGQlFWRXNRMEZCUXl4TlFVRk5MRVZCUVVVN1VVRkRjRUlzVFVGQlRTeEpRVUZKTEVkQlFVY3NVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU5vUXl4SlFVRkpMRTFCUVUwc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eFhRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMR2xEUVVGNVFpeERRVUZETEVOQlFVTXNSVUZCUlR0WlFVTm9SU3hQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNWVUZCVlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hWUVVGVkxFTkJRVU1zUlVGQlJTeFRRVUZUTEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNN1UwRkRNVVU3WVVGRFNUdFpRVU5FTEZGQlFWRXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRUUVVOc1FqdExRVU5LTzBsQlEwUXNUMEZCVHl4RlFVRkZMRk5CUVZNc1JVRkJSU3hIUVVGSExFVkJRVVVzVFVGQlRTeEZRVUZGTEZOQlFWTXNSVUZCUlN4RFFVRkRPMEZCUTJwRUxFTkJRVU03UVVGYVJDdzRRMEZaUXp0QlFVTkVMRk5CUVdkQ0xHRkJRV0VzUTBGQlF5eFBRVUZQTzBsQlEycERMRTlCUVU4c2RVSkJRVmNzUTBGQlF5eFZRVUZWTEVOQlFVTTdVVUZETVVJc1VVRkJVU3hGUVVGRkxGTkJRVk03VVVGRGJrSXNVVUZCVVN4RlFVRkZMRk5CUVZNN1VVRkRia0lzUzBGQlN5eEZRVUZGTEZOQlFWTTdVVUZEYUVJc1lVRkJZU3hGUVVGRkxGTkJRVk03VVVGRGVFSXNTVUZCU1N4RlFVRkZMRk5CUVZNN1VVRkRaaXhMUVVGTExFVkJRVVVzVTBGQlV6dExRVU51UWl4RlFVRkZMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzVDBGQlR5eERRVUZETEZOQlFWTXNSVUZCUlN4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRE4wUXNRMEZCUXp0QlFWUkVMSE5EUVZORE8wRkJRMDBzUzBGQlN5eFZRVUZWTEZWQlFWVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1ZVRkJWVHRKUVVNM1F5eE5RVUZOTEUxQlFVMHNSMEZCUnl4TlFVRk5MRlZCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zVjBGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4cFEwRkJlVUlzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZET1VVc1NVRkJTU3hEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRVZCUVVVN1VVRkROVUlzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4eFEwRkJjVU1zU1VGQlNTdzJRa0ZCTmtJc1EwRkJReXhEUVVGRE8wdEJRek5HTzBsQlEwUXNiMFZCUVc5Rk8wbEJRM0JGTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTlCUVU4c1JVRkJSVHRSUVVOb1FpeFpRVUZaTzFGQlExb3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU03UzBGRE0wSTdTVUZEUkN4UFFVRlBMRTFCUVUwc1EwRkJRenRCUVVOc1FpeERRVUZETzBGQldFUXNaME5CVjBNN1FVRkRSQ3hUUVVGblFpeFRRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZMRlZCUVZVN1NVRkRlRU1zVFVGQlRTeFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGxCUTJ4RUxFbEJRVWtzWVVGQllTeERRVUZETzBsQlEyeENMRXRCUVVzc1RVRkJUU3hOUVVGTkxFbEJRVWtzVDBGQlR5eEZRVUZGTzFGQlF6RkNMRWxCUVVrc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVsQlFVa3NSVUZCUlR0WlFVTTNRaXhQUVVGUExFMUJRVTBzUTBGQlF6dFRRVU5xUWp0UlFVTkVMRWxCUVVrc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVGRk8xbEJRM1JETEdGQlFXRXNSMEZCUnl4TlFVRk5MRU5CUVVNN1UwRkRNVUk3UzBGRFNqdEpRVU5FTEVsQlFVa3NZVUZCWVN4RlFVRkZPMUZCUTJZc1QwRkJUeXhoUVVGaExFTkJRVU03UzBGRGVFSTdVMEZEU1N4SlFVRkpMRTlCUVU4c1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEZRVUZGTzFGQlF6TkNMRTlCUVU4c1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEzSkNPMU5CUTBrN1VVRkRSQ3hQUVVGUExGTkJRVk1zUTBGQlF6dExRVU53UWp0QlFVTk1MRU5CUVVNN1FVRndRa1FzT0VKQmIwSkRJbjA9Il19