"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const utilities_1 = require("utilities");
exports.OCTOPACK_CONFIG_FILE_NAME = 'octopack.js';
async function findConfiguration(cwd, fileSystem) {
    const segments = cwd.split('/');
    while (segments.length) {
        const path = segments.join('/');
        if (await fileSystem.exists(path_1.join(path, exports.OCTOPACK_CONFIG_FILE_NAME))) {
            return { config: await loadConfig(path, fileSystem), directory: path };
        }
        else {
            segments.pop();
        }
    }
    return { directory: '/', config: undefined };
}
exports.findConfiguration = findConfiguration;
function resolveConfig(configs) {
    return utilities_1.objectUtils.deepAssign({
        build: undefined,
        configVersion: undefined,
        name: undefined,
        scope: undefined
    }, configs.solution, configs.workspace, configs.project);
}
exports.resolveConfig = resolveConfig;
async function loadConfig(path, fileSystem) {
    const config = await fileSystem.import(path_1.join(path, exports.OCTOPACK_CONFIG_FILE_NAME));
    if (!config && !config.default) {
        throw new Error(`Invalid octopack configuration at ${path}. No configuration returned`);
    }
    // telling typescript to ignore this because we normalize the object
    if (config.default) {
        //@ts-ignore
        config = config.default;
    }
    return config;
}
exports.loadConfig = loadConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ19yZXNvbHZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiY29uZmlnX3Jlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGF0aF8xID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCB1dGlsaXRpZXNfMSA9IHJlcXVpcmUoXCJ1dGlsaXRpZXNcIik7XG5leHBvcnRzLk9DVE9QQUNLX0NPTkZJR19GSUxFX05BTUUgPSAnb2N0b3BhY2suanMnO1xuYXN5bmMgZnVuY3Rpb24gZmluZENvbmZpZ3VyYXRpb24oY3dkLCBmaWxlU3lzdGVtKSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBjd2Quc3BsaXQoJy8nKTtcbiAgICB3aGlsZSAoc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBzZWdtZW50cy5qb2luKCcvJyk7XG4gICAgICAgIGlmIChhd2FpdCBmaWxlU3lzdGVtLmV4aXN0cyhwYXRoXzEuam9pbihwYXRoLCBleHBvcnRzLk9DVE9QQUNLX0NPTkZJR19GSUxFX05BTUUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgY29uZmlnOiBhd2FpdCBsb2FkQ29uZmlnKHBhdGgsIGZpbGVTeXN0ZW0pLCBkaXJlY3Rvcnk6IHBhdGggfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlZ21lbnRzLnBvcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGRpcmVjdG9yeTogJy8nLCBjb25maWc6IHVuZGVmaW5lZCB9O1xufVxuZXhwb3J0cy5maW5kQ29uZmlndXJhdGlvbiA9IGZpbmRDb25maWd1cmF0aW9uO1xuZnVuY3Rpb24gcmVzb2x2ZUNvbmZpZyhjb25maWdzKSB7XG4gICAgcmV0dXJuIHV0aWxpdGllc18xLm9iamVjdFV0aWxzLmRlZXBBc3NpZ24oe1xuICAgICAgICBidWlsZDogdW5kZWZpbmVkLFxuICAgICAgICBjb25maWdWZXJzaW9uOiB1bmRlZmluZWQsXG4gICAgICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgc2NvcGU6IHVuZGVmaW5lZFxuICAgIH0sIGNvbmZpZ3Muc29sdXRpb24sIGNvbmZpZ3Mud29ya3NwYWNlLCBjb25maWdzLnByb2plY3QpO1xufVxuZXhwb3J0cy5yZXNvbHZlQ29uZmlnID0gcmVzb2x2ZUNvbmZpZztcbmFzeW5jIGZ1bmN0aW9uIGxvYWRDb25maWcocGF0aCwgZmlsZVN5c3RlbSkge1xuICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGZpbGVTeXN0ZW0uaW1wb3J0KHBhdGhfMS5qb2luKHBhdGgsIGV4cG9ydHMuT0NUT1BBQ0tfQ09ORklHX0ZJTEVfTkFNRSkpO1xuICAgIGlmICghY29uZmlnICYmICFjb25maWcuZGVmYXVsdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgb2N0b3BhY2sgY29uZmlndXJhdGlvbiBhdCAke3BhdGh9LiBObyBjb25maWd1cmF0aW9uIHJldHVybmVkYCk7XG4gICAgfVxuICAgIC8vIHRlbGxpbmcgdHlwZXNjcmlwdCB0byBpZ25vcmUgdGhpcyBiZWNhdXNlIHdlIG5vcm1hbGl6ZSB0aGUgb2JqZWN0XG4gICAgaWYgKGNvbmZpZy5kZWZhdWx0KSB7XG4gICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICBjb25maWcgPSBjb25maWcuZGVmYXVsdDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbmV4cG9ydHMubG9hZENvbmZpZyA9IGxvYWRDb25maWc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMjl1Wm1sblgzSmxjMjlzZG1WeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpWTI5dVptbG5YM0psYzI5c2RtVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNLMEpCUVRSQ08wRkJRelZDTEhsRFFVRjNRenRCUVVNelFpeFJRVUZCTEhsQ1FVRjVRaXhIUVVGSExHRkJRV0VzUTBGQlF6dEJRVU5vUkN4TFFVRkxMRlZCUVZVc2FVSkJRV2xDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRlZCUVZVN1NVRkRia1FzVFVGQlRTeFJRVUZSTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU5vUXl4UFFVRlBMRkZCUVZFc1EwRkJReXhOUVVGTkxFVkJRVVU3VVVGRGNFSXNUVUZCVFN4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTm9ReXhKUVVGSkxFMUJRVTBzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxHbERRVUY1UWl4RFFVRkRMRU5CUVVNc1JVRkJSVHRaUVVOb1JTeFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1ZVRkJWU3hEUVVGRExFbEJRVWtzUlVGQlJTeFZRVUZWTEVOQlFVTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU03VTBGRE1VVTdZVUZEU1R0WlFVTkVMRkZCUVZFc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFRRVU5zUWp0TFFVTktPMGxCUTBRc1QwRkJUeXhGUVVGRkxGTkJRVk1zUlVGQlJTeEhRVUZITEVWQlFVVXNUVUZCVFN4RlFVRkZMRk5CUVZNc1JVRkJSU3hEUVVGRE8wRkJRMnBFTEVOQlFVTTdRVUZhUkN3NFEwRlpRenRCUVVORUxGTkJRV2RDTEdGQlFXRXNRMEZCUXl4UFFVRlBPMGxCUTJwRExFOUJRVThzZFVKQlFWY3NRMEZCUXl4VlFVRlZMRU5CUVVNN1VVRkRNVUlzUzBGQlN5eEZRVUZGTEZOQlFWTTdVVUZEYUVJc1lVRkJZU3hGUVVGRkxGTkJRVk03VVVGRGVFSXNTVUZCU1N4RlFVRkZMRk5CUVZNN1VVRkRaaXhMUVVGTExFVkJRVVVzVTBGQlV6dExRVU51UWl4RlFVRkZMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzVDBGQlR5eERRVUZETEZOQlFWTXNSVUZCUlN4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UVVGRE4wUXNRMEZCUXp0QlFWQkVMSE5EUVU5RE8wRkJRMDBzUzBGQlN5eFZRVUZWTEZWQlFWVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1ZVRkJWVHRKUVVNM1F5eE5RVUZOTEUxQlFVMHNSMEZCUnl4TlFVRk5MRlZCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zVjBGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4cFEwRkJlVUlzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZET1VVc1NVRkJTU3hEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRVZCUVVVN1VVRkROVUlzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4eFEwRkJjVU1zU1VGQlNTdzJRa0ZCTmtJc1EwRkJReXhEUVVGRE8wdEJRek5HTzBsQlEwUXNiMFZCUVc5Rk8wbEJRM0JGTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTlCUVU4c1JVRkJSVHRSUVVOb1FpeFpRVUZaTzFGQlExb3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU03UzBGRE0wSTdTVUZEUkN4UFFVRlBMRTFCUVUwc1EwRkJRenRCUVVOc1FpeERRVUZETzBGQldFUXNaME5CVjBNaWZRPT0iXX0=