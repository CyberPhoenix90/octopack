"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = require("typescript");
const file_system_1 = require("file_system");
const tslint_1 = require("tslint");
class FileManipulator {
    constructor(fileContent, language = typescript_1.ScriptKind.TSX) {
        this.ast = typescript_1.createSourceFile('virtual', fileContent, typescript_1.ScriptTarget.ESNext, true, language);
        this.content = fileContent;
        this.language = language;
        this.manipulations = [];
    }
    /**
     * Rewrites AST based on the changes you requested
     */
    applyManipulations() {
        if (this.manipulations.length === 0) {
            return;
        }
        this.manipulations.sort((a, b) => b.start - a.start);
        for (const manipulation of this.manipulations) {
            this.content =
                this.content.substring(0, manipulation.start) +
                    manipulation.replacement +
                    this.content.substring(manipulation.end);
        }
        this.ast = typescript_1.createSourceFile('virtual', this.content, typescript_1.ScriptTarget.ESNext, true, this.language);
        this.manipulations = [];
    }
    async writeResult(path, fileSystem) {
        this.applyManipulations();
        fileSystem.writeFile(path, this.content);
    }
    toVirtualFile(path) {
        this.applyManipulations();
        return {
            fullPath: path,
            parent: undefined,
            type: file_system_1.FileSystemEntryType.FILE,
            content: this.content
        };
    }
    forEachComment(query) {
        tslint_1.forEachComment(this.ast, (fullText, kind, pos) => {
            this.manipulations.push(...(query(fullText.substring(pos.fullStart, pos.end), pos, kind) || []));
        });
    }
    queryAst(query) {
        const queryNode = (node) => {
            this.manipulations.push(...(query(node) || []));
            node.forEachChild(queryNode);
            return;
        };
        this.ast.forEachChild(queryNode);
    }
}
exports.FileManipulator = FileManipulator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGVfbWFuaXB1bGF0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZmlsZV9tYW5pcHVsYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHR5cGVzY3JpcHRfMSA9IHJlcXVpcmUoXCJ0eXBlc2NyaXB0XCIpO1xuY29uc3QgZmlsZV9zeXN0ZW1fMSA9IHJlcXVpcmUoXCJmaWxlX3N5c3RlbVwiKTtcbmNvbnN0IHRzbGludF8xID0gcmVxdWlyZShcInRzbGludFwiKTtcbmNsYXNzIEZpbGVNYW5pcHVsYXRvciB7XG4gICAgY29uc3RydWN0b3IoZmlsZUNvbnRlbnQsIGxhbmd1YWdlID0gdHlwZXNjcmlwdF8xLlNjcmlwdEtpbmQuVFNYKSB7XG4gICAgICAgIHRoaXMuYXN0ID0gdHlwZXNjcmlwdF8xLmNyZWF0ZVNvdXJjZUZpbGUoJ3ZpcnR1YWwnLCBmaWxlQ29udGVudCwgdHlwZXNjcmlwdF8xLlNjcmlwdFRhcmdldC5FU05leHQsIHRydWUsIGxhbmd1YWdlKTtcbiAgICAgICAgdGhpcy5jb250ZW50ID0gZmlsZUNvbnRlbnQ7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbiAgICAgICAgdGhpcy5tYW5pcHVsYXRpb25zID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJld3JpdGVzIEFTVCBiYXNlZCBvbiB0aGUgY2hhbmdlcyB5b3UgcmVxdWVzdGVkXG4gICAgICovXG4gICAgYXBwbHlNYW5pcHVsYXRpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5tYW5pcHVsYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFuaXB1bGF0aW9ucy5zb3J0KChhLCBiKSA9PiBiLnN0YXJ0IC0gYS5zdGFydCk7XG4gICAgICAgIGZvciAoY29uc3QgbWFuaXB1bGF0aW9uIG9mIHRoaXMubWFuaXB1bGF0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50ID1cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuc3Vic3RyaW5nKDAsIG1hbmlwdWxhdGlvbi5zdGFydCkgK1xuICAgICAgICAgICAgICAgICAgICBtYW5pcHVsYXRpb24ucmVwbGFjZW1lbnQgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuc3Vic3RyaW5nKG1hbmlwdWxhdGlvbi5lbmQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXN0ID0gdHlwZXNjcmlwdF8xLmNyZWF0ZVNvdXJjZUZpbGUoJ3ZpcnR1YWwnLCB0aGlzLmNvbnRlbnQsIHR5cGVzY3JpcHRfMS5TY3JpcHRUYXJnZXQuRVNOZXh0LCB0cnVlLCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgdGhpcy5tYW5pcHVsYXRpb25zID0gW107XG4gICAgfVxuICAgIGFzeW5jIHdyaXRlUmVzdWx0KHBhdGgsIGZpbGVTeXN0ZW0pIHtcbiAgICAgICAgdGhpcy5hcHBseU1hbmlwdWxhdGlvbnMoKTtcbiAgICAgICAgZmlsZVN5c3RlbS53cml0ZUZpbGUocGF0aCwgdGhpcy5jb250ZW50KTtcbiAgICB9XG4gICAgdG9WaXJ0dWFsRmlsZShwYXRoKSB7XG4gICAgICAgIHRoaXMuYXBwbHlNYW5pcHVsYXRpb25zKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmdWxsUGF0aDogcGF0aCxcbiAgICAgICAgICAgIHBhcmVudDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdHlwZTogZmlsZV9zeXN0ZW1fMS5GaWxlU3lzdGVtRW50cnlUeXBlLkZJTEUsXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLmNvbnRlbnRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZm9yRWFjaENvbW1lbnQocXVlcnkpIHtcbiAgICAgICAgdHNsaW50XzEuZm9yRWFjaENvbW1lbnQodGhpcy5hc3QsIChmdWxsVGV4dCwga2luZCwgcG9zKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1hbmlwdWxhdGlvbnMucHVzaCguLi4ocXVlcnkoZnVsbFRleHQuc3Vic3RyaW5nKHBvcy5mdWxsU3RhcnQsIHBvcy5lbmQpLCBwb3MsIGtpbmQpIHx8IFtdKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBxdWVyeUFzdChxdWVyeSkge1xuICAgICAgICBjb25zdCBxdWVyeU5vZGUgPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tYW5pcHVsYXRpb25zLnB1c2goLi4uKHF1ZXJ5KG5vZGUpIHx8IFtdKSk7XG4gICAgICAgICAgICBub2RlLmZvckVhY2hDaGlsZChxdWVyeU5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFzdC5mb3JFYWNoQ2hpbGQocXVlcnlOb2RlKTtcbiAgICB9XG59XG5leHBvcnRzLkZpbGVNYW5pcHVsYXRvciA9IEZpbGVNYW5pcHVsYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVptbHNaVjl0WVc1cGNIVnNZWFJ2Y2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbVpwYkdWZmJXRnVhWEIxYkdGMGIzSXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTd3lRMEZCZDBVN1FVRkRlRVVzTmtOQlFXdEVPMEZCUTJ4RUxHMURRVUYzUXp0QlFVTjRReXhOUVVGaExHVkJRV1U3U1VGRGVFSXNXVUZCV1N4WFFVRlhMRVZCUVVVc1VVRkJVU3hIUVVGSExIVkNRVUZWTEVOQlFVTXNSMEZCUnp0UlFVTTVReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITERaQ1FVRm5RaXhEUVVGRExGTkJRVk1zUlVGQlJTeFhRVUZYTEVWQlFVVXNlVUpCUVZrc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMUZCUTNwR0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NWMEZCVnl4RFFVRkRPMUZCUXpOQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRPMUZCUTNwQ0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUXpWQ0xFTkJRVU03U1VGRFJEczdUMEZGUnp0SlFVTklMR3RDUVVGclFqdFJRVU5rTEVsQlFVa3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEZRVUZGTzFsQlEycERMRTlCUVU4N1UwRkRWanRSUVVORUxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZEY2tRc1MwRkJTeXhOUVVGTkxGbEJRVmtzU1VGQlNTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZPMWxCUXpORExFbEJRVWtzUTBGQlF5eFBRVUZQTzJkQ1FVTlNMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNSVUZCUlN4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRE8yOUNRVU42UXl4WlFVRlpMRU5CUVVNc1YwRkJWenR2UWtGRGVFSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMU5CUTNCRU8xRkJRMFFzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl3MlFrRkJaMElzUTBGQlF5eFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSU3g1UWtGQldTeERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFGQlF5OUdMRWxCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzUlVGQlJTeERRVUZETzBsQlF6VkNMRU5CUVVNN1NVRkRSQ3hMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NSVUZCUlN4VlFVRlZPMUZCUXpsQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hEUVVGRE8xRkJRekZDTEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0SlFVTTNReXhEUVVGRE8wbEJRMFFzWVVGQllTeERRVUZETEVsQlFVazdVVUZEWkN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNRMEZCUXp0UlFVTXhRaXhQUVVGUE8xbEJRMGdzVVVGQlVTeEZRVUZGTEVsQlFVazdXVUZEWkN4TlFVRk5MRVZCUVVVc1UwRkJVenRaUVVOcVFpeEpRVUZKTEVWQlFVVXNhVU5CUVcxQ0xFTkJRVU1zU1VGQlNUdFpRVU01UWl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVTg3VTBGRGVFSXNRMEZCUXp0SlFVTk9MRU5CUVVNN1NVRkRSQ3hqUVVGakxFTkJRVU1zUzBGQlN6dFJRVU5vUWl4MVFrRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEZRVUZGTzFsQlF6ZERMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RlFVRkZMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU55Unl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU03U1VGRFJDeFJRVUZSTEVOQlFVTXNTMEZCU3p0UlFVTldMRTFCUVUwc1UwRkJVeXhIUVVGSExFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZEZGtJc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJoRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkROMElzVDBGQlR6dFJRVU5ZTEVOQlFVTXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zV1VGQldTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUTNKRExFTkJRVU03UTBGRFNqdEJRV3hFUkN3d1EwRnJSRU1pZlE9PSJdfQ==