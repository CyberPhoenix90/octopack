"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ObjectUtils {
    deepAssign(...args) {
        const target = args[0];
        if (args.length <= 1) {
            return target;
        }
        if (args[0] === undefined || args[0] === null) {
            throw new Error('Cannot assign unto undefined or null');
        }
        args = args.filter((p) => p);
        //Get all unique keys among all objects
        const keys = args.flatMap(Object.keys).filter((e, index, arr) => arr.lastIndexOf(e) === arr.indexOf(e, index));
        for (const key of keys) {
            for (const source of args) {
                if (source === target) {
                    continue;
                }
                if (key in source && !(key in target)) {
                    //@ts-ignore
                    this.simpleAssign(key, source, target);
                }
                else if (key in target && key in source) {
                    if (
                    //@ts-ignore
                    typeof target[key] === 'object' &&
                        //@ts-ignore
                        typeof source[key] === 'object' &&
                        //@ts-ignore
                        !Array.isArray(target[key]) &&
                        //@ts-ignore
                        !Array.isArray(source[key])) {
                        //@ts-ignore
                        this.deepAssign(target[key], source[key]);
                    }
                    else {
                        //@ts-ignore
                        this.simpleAssign(key, source, target);
                    }
                }
            }
        }
        return target;
    }
    simpleAssign(key, source, target) {
        //@ts-ignore
        if (typeof source[key] === 'object') {
            //@ts-ignore
            if (Array.isArray(source[key])) {
                //@ts-ignore
                target[key] = source[key].slice();
            }
            else {
                //@ts-ignore
                target[key] = {};
                //@ts-ignore
                this.deepAssign(target[key], source[key]);
            }
        }
        else {
            //@ts-ignore
            target[key] = source[key];
        }
    }
}
exports.objectUtils = new ObjectUtils();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9iamVjdF91dGlsaXRpZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJvYmplY3RfdXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgT2JqZWN0VXRpbHMge1xuICAgIGRlZXBBc3NpZ24oLi4uYXJncykge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBhcmdzWzBdO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJnc1swXSA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFzc2lnbiB1bnRvIHVuZGVmaW5lZCBvciBudWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncyA9IGFyZ3MuZmlsdGVyKChwKSA9PiBwKTtcbiAgICAgICAgLy9HZXQgYWxsIHVuaXF1ZSBrZXlzIGFtb25nIGFsbCBvYmplY3RzXG4gICAgICAgIGNvbnN0IGtleXMgPSBhcmdzLmZsYXRNYXAoT2JqZWN0LmtleXMpLmZpbHRlcigoZSwgaW5kZXgsIGFycikgPT4gYXJyLmxhc3RJbmRleE9mKGUpID09PSBhcnIuaW5kZXhPZihlLCBpbmRleCkpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBhcmdzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHNvdXJjZSAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpbXBsZUFzc2lnbihrZXksIHNvdXJjZSwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5IGluIHRhcmdldCAmJiBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNvdXJjZVtrZXldID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAhQXJyYXkuaXNBcnJheSh0YXJnZXRba2V5XSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgIUFycmF5LmlzQXJyYXkoc291cmNlW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVlcEFzc2lnbih0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNpbXBsZUFzc2lnbihrZXksIHNvdXJjZSwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICBzaW1wbGVBc3NpZ24oa2V5LCBzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2Vba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XS5zbGljZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB7fTtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB0aGlzLmRlZXBBc3NpZ24odGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMub2JqZWN0VXRpbHMgPSBuZXcgT2JqZWN0VXRpbHMoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWIySnFaV04wWDNWMGFXeHBkR2xsY3k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJbTlpYW1WamRGOTFkR2xzYVhScFpYTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeE5RVUZOTEZkQlFWYzdTVUZEWWl4VlFVRlZMRU5CUVVNc1IwRkJSeXhKUVVGSk8xRkJRMlFzVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM1pDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFVkJRVVU3V1VGRGJFSXNUMEZCVHl4TlFVRk5MRU5CUVVNN1UwRkRha0k3VVVGRFJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhUUVVGVExFbEJRVWtzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRWxCUVVrc1JVRkJSVHRaUVVNelF5eE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMSE5EUVVGelF5eERRVUZETEVOQlFVTTdVMEZETTBRN1VVRkRSQ3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETjBJc2RVTkJRWFZETzFGQlEzWkRMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRVZCUVVVc1IwRkJSeXhGUVVGRkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03VVVGREwwY3NTMEZCU3l4TlFVRk5MRWRCUVVjc1NVRkJTU3hKUVVGSkxFVkJRVVU3V1VGRGNFSXNTMEZCU3l4TlFVRk5MRTFCUVUwc1NVRkJTU3hKUVVGSkxFVkJRVVU3WjBKQlEzWkNMRWxCUVVrc1RVRkJUU3hMUVVGTExFMUJRVTBzUlVGQlJUdHZRa0ZEYmtJc1UwRkJVenRwUWtGRFdqdG5Ra0ZEUkN4SlFVRkpMRWRCUVVjc1NVRkJTU3hOUVVGTkxFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4TlFVRk5MRU5CUVVNc1JVRkJSVHR2UWtGRGJrTXNXVUZCV1R0dlFrRkRXaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NSVUZCUlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03YVVKQlF6RkRPM0ZDUVVOSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1RVRkJUU3hGUVVGRk8yOUNRVU55UXp0dlFrRkRRU3haUVVGWk8yOUNRVU5hTEU5QlFVOHNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExGRkJRVkU3ZDBKQlF6TkNMRmxCUVZrN2QwSkJRMW9zVDBGQlR5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1VVRkJVVHQzUWtGREwwSXNXVUZCV1R0M1FrRkRXaXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8zZENRVU16UWl4WlFVRlpPM2RDUVVOYUxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJUdDNRa0ZETjBJc1dVRkJXVHQzUWtGRFdpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenR4UWtGRE4wTTdlVUpCUTBrN2QwSkJRMFFzV1VGQldUdDNRa0ZEV2l4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFZEJRVWNzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN2NVSkJRekZETzJsQ1FVTktPMkZCUTBvN1UwRkRTanRSUVVORUxFOUJRVThzVFVGQlRTeERRVUZETzBsQlEyeENMRU5CUVVNN1NVRkRSQ3haUVVGWkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5PMUZCUXpWQ0xGbEJRVms3VVVGRFdpeEpRVUZKTEU5QlFVOHNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExGRkJRVkVzUlVGQlJUdFpRVU5xUXl4WlFVRlpPMWxCUTFvc1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRk8yZENRVU0xUWl4WlFVRlpPMmRDUVVOYUxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdZVUZEY2tNN2FVSkJRMGs3WjBKQlEwUXNXVUZCV1R0blFrRkRXaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMmRDUVVOcVFpeFpRVUZaTzJkQ1FVTmFMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzJGQlF6ZERPMU5CUTBvN1lVRkRTVHRaUVVORUxGbEJRVms3V1VGRFdpeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzFOQlF6ZENPMGxCUTB3c1EwRkJRenREUVVOS08wRkJRMWtzVVVGQlFTeFhRVUZYTEVkQlFVY3NTVUZCU1N4WFFVRlhMRVZCUVVVc1EwRkJReUo5Il19