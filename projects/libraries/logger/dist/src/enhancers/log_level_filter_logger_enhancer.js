"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_enhancer_1 = require("./logger_enhancer");
const log_level_1 = require("../log/log_level");
class LogLevelFilterLoggerEnhancer extends logger_enhancer_1.LoggerEnhancer {
    constructor(logLevel) {
        super();
        this.logLevel = logLevel;
    }
    enhance(log) {
        switch (this.logLevel) {
            case log_level_1.LogLevel.DEBUG:
                return log;
            case log_level_1.LogLevel.INFO:
                if (log.logLevel === log_level_1.LogLevel.DEBUG) {
                    return undefined;
                }
                else {
                    return log;
                }
            case log_level_1.LogLevel.WARN:
                if (log.logLevel === log_level_1.LogLevel.INFO || log.logLevel === log_level_1.LogLevel.DEBUG) {
                    return undefined;
                }
                else {
                    return log;
                }
            case log_level_1.LogLevel.ERROR:
                if (log.logLevel !== log_level_1.LogLevel.ERROR) {
                    return undefined;
                }
                else {
                    return log;
                }
        }
    }
}
exports.LogLevelFilterLoggerEnhancer = LogLevelFilterLoggerEnhancer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ19sZXZlbF9maWx0ZXJfbG9nZ2VyX2VuaGFuY2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJsb2dfbGV2ZWxfZmlsdGVyX2xvZ2dlcl9lbmhhbmNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGxvZ2dlcl9lbmhhbmNlcl8xID0gcmVxdWlyZShcIi4vbG9nZ2VyX2VuaGFuY2VyXCIpO1xuY29uc3QgbG9nX2xldmVsXzEgPSByZXF1aXJlKFwiLi4vbG9nL2xvZ19sZXZlbFwiKTtcbmNsYXNzIExvZ0xldmVsRmlsdGVyTG9nZ2VyRW5oYW5jZXIgZXh0ZW5kcyBsb2dnZXJfZW5oYW5jZXJfMS5Mb2dnZXJFbmhhbmNlciB7XG4gICAgY29uc3RydWN0b3IobG9nTGV2ZWwpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5sb2dMZXZlbCA9IGxvZ0xldmVsO1xuICAgIH1cbiAgICBlbmhhbmNlKGxvZykge1xuICAgICAgICBzd2l0Y2ggKHRoaXMubG9nTGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgbG9nX2xldmVsXzEuTG9nTGV2ZWwuREVCVUc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZztcbiAgICAgICAgICAgIGNhc2UgbG9nX2xldmVsXzEuTG9nTGV2ZWwuSU5GTzpcbiAgICAgICAgICAgICAgICBpZiAobG9nLmxvZ0xldmVsID09PSBsb2dfbGV2ZWxfMS5Mb2dMZXZlbC5ERUJVRykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGxvZ19sZXZlbF8xLkxvZ0xldmVsLldBUk46XG4gICAgICAgICAgICAgICAgaWYgKGxvZy5sb2dMZXZlbCA9PT0gbG9nX2xldmVsXzEuTG9nTGV2ZWwuSU5GTyB8fCBsb2cubG9nTGV2ZWwgPT09IGxvZ19sZXZlbF8xLkxvZ0xldmVsLkRFQlVHKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgbG9nX2xldmVsXzEuTG9nTGV2ZWwuRVJST1I6XG4gICAgICAgICAgICAgICAgaWYgKGxvZy5sb2dMZXZlbCAhPT0gbG9nX2xldmVsXzEuTG9nTGV2ZWwuRVJST1IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2c7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Mb2dMZXZlbEZpbHRlckxvZ2dlckVuaGFuY2VyID0gTG9nTGV2ZWxGaWx0ZXJMb2dnZXJFbmhhbmNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJHOW5YMnhsZG1Wc1gyWnBiSFJsY2w5c2IyZG5aWEpmWlc1b1lXNWpaWEl1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SnNiMmRmYkdWMlpXeGZabWxzZEdWeVgyeHZaMmRsY2w5bGJtaGhibU5sY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEhWRVFVRnRSRHRCUVVOdVJDeG5SRUZCTkVNN1FVRkROVU1zVFVGQllTdzBRa0ZCTmtJc1UwRkJVU3huUTBGQll6dEpRVU0xUkN4WlFVRlpMRkZCUVZFN1VVRkRhRUlzUzBGQlN5eEZRVUZGTEVOQlFVTTdVVUZEVWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF6dEpRVU0zUWl4RFFVRkRPMGxCUTBRc1QwRkJUeXhEUVVGRExFZEJRVWM3VVVGRFVDeFJRVUZSTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1dVRkRia0lzUzBGQlN5eHZRa0ZCVVN4RFFVRkRMRXRCUVVzN1owSkJRMllzVDBGQlR5eEhRVUZITEVOQlFVTTdXVUZEWml4TFFVRkxMRzlDUVVGUkxFTkJRVU1zU1VGQlNUdG5Ra0ZEWkN4SlFVRkpMRWRCUVVjc1EwRkJReXhSUVVGUkxFdEJRVXNzYjBKQlFWRXNRMEZCUXl4TFFVRkxMRVZCUVVVN2IwSkJRMnBETEU5QlFVOHNVMEZCVXl4RFFVRkRPMmxDUVVOd1FqdHhRa0ZEU1R0dlFrRkRSQ3hQUVVGUExFZEJRVWNzUTBGQlF6dHBRa0ZEWkR0WlFVTk1MRXRCUVVzc2IwSkJRVkVzUTBGQlF5eEpRVUZKTzJkQ1FVTmtMRWxCUVVrc1IwRkJSeXhEUVVGRExGRkJRVkVzUzBGQlN5eHZRa0ZCVVN4RFFVRkRMRWxCUVVrc1NVRkJTU3hIUVVGSExFTkJRVU1zVVVGQlVTeExRVUZMTEc5Q1FVRlJMRU5CUVVNc1MwRkJTeXhGUVVGRk8yOUNRVU51UlN4UFFVRlBMRk5CUVZNc1EwRkJRenRwUWtGRGNFSTdjVUpCUTBrN2IwSkJRMFFzVDBGQlR5eEhRVUZITEVOQlFVTTdhVUpCUTJRN1dVRkRUQ3hMUVVGTExHOUNRVUZSTEVOQlFVTXNTMEZCU3p0blFrRkRaaXhKUVVGSkxFZEJRVWNzUTBGQlF5eFJRVUZSTEV0QlFVc3NiMEpCUVZFc1EwRkJReXhMUVVGTExFVkJRVVU3YjBKQlEycERMRTlCUVU4c1UwRkJVeXhEUVVGRE8ybENRVU53UWp0eFFrRkRTVHR2UWtGRFJDeFBRVUZQTEVkQlFVY3NRMEZCUXp0cFFrRkRaRHRUUVVOU08wbEJRMHdzUTBGQlF6dERRVU5LTzBGQmFFTkVMRzlGUVdkRFF5SjkiXX0=