"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const file_system_1 = require("../file_system");
const file_path_utils_1 = require("../file_path_utils");
const path_1 = require("path");
class MemoryFileSystem extends file_system_1.FileSystem {
    constructor(data) {
        super();
        this.fileSystem = data
            ? this.fromJson(data)
            : {
                children: {},
                fullPath: '/',
                name: '/',
                parent: undefined,
                type: file_system_1.FileSystemEntryType.DIRECTORY
            };
    }
    watch(paths, options, callback) {
        throw new Error('Method not implemented.');
    }
    watchSync(paths, options, callback) {
        throw new Error('Method not implemented.');
    }
    async readlink(path) {
        return '';
    }
    readlinkSync(path) {
        return '';
    }
    async realpath(path) {
        return path_1.resolve(path);
    }
    realpathSync(path) {
        return path_1.resolve(path);
    }
    fromJson(json) {
        throw new Error('not implemented');
    }
    async toJson() {
        const files = await this.readDirRecursive('/', {});
        const result = {};
        for (const file of files) {
            result[file] = this.readFileSync(file, 'utf8');
        }
        return result;
    }
    async mkdir(path) {
        return this.mkdirSync(path);
    }
    mkdirSync(path) {
        const fp = new file_path_utils_1.FilePath(path);
        const entry = this.getEntry(fp.getDirectory());
        if (!entry) {
            throw new Error(`Path does not exist for ${path}`);
        }
        else if (entry.type === file_system_1.FileSystemEntryType.FILE) {
            throw new Error('cannot add directories into files');
        }
        entry.children[fp.getFullFileName()] = {
            fullPath: path,
            children: {},
            name: fp.getFullFileName(),
            parent: entry,
            type: file_system_1.FileSystemEntryType.DIRECTORY
        };
    }
    async rmdir(path) {
        return this.rmdirSync(path);
    }
    rmdirSync(path) {
        const entry = this.getEntry(path);
        if (entry) {
            if (entry.type === file_system_1.FileSystemEntryType.DIRECTORY) {
                if (Object.keys(entry.children).length !== 0) {
                    throw new Error('unlink can only delete empty directories');
                }
                delete entry.parent.children[entry.name];
            }
            else {
                throw new Error(`rmdir can only remove directories`);
            }
        }
        else {
            throw new Error(`Path not found: ${path}`);
        }
    }
    async unlink(path) {
        return this.unlinkSync(path);
    }
    unlinkSync(path) {
        const entry = this.getEntry(path);
        if (entry) {
            if (entry.type === file_system_1.FileSystemEntryType.DIRECTORY) {
                if (Object.keys(entry.children).length !== 0) {
                    throw new Error('unlink can only delete empty directories');
                }
            }
            delete entry.parent.children[entry.name];
        }
        else {
            throw new Error(`Path not found: ${path}`);
        }
    }
    async readFile(path, encoding) {
        return this.readFileSync(path, encoding);
    }
    readFileSync(path, encoding) {
        const entry = this.getEntry(path);
        if (!entry) {
            throw new Error(`No such path ${path}`);
        }
        if (entry.type === file_system_1.FileSystemEntryType.DIRECTORY) {
            throw new Error(`${path} is a directory`);
        }
        return entry.content;
    }
    async stat(path) {
        return this.statSync(path);
    }
    statSync(path) {
        const entry = this.getEntry(path);
        if (!entry) {
            throw new Error(`No such path ${path}`);
        }
        const s = {
            type: entry.type,
            isBlockDevice: false,
            isCharacterDevice: false,
            isFIFO: false,
            isSocket: false,
            isSymbolicLink: false,
            size: entry.content ? entry.content.length : 0
        };
        return s;
    }
    async readDir(path) {
        return this.readDirSync(path);
    }
    readDirSync(path) {
        const entry = this.getEntry(path);
        if (!entry) {
            throw new Error(`No such path ${path}`);
        }
        if (entry.type === file_system_1.FileSystemEntryType.FILE) {
            throw new Error(`${path} is a file`);
        }
        return Object.keys(entry.children);
    }
    async exists(path) {
        return this.existsSync(path);
    }
    existsSync(path) {
        return this.getEntry(path) !== undefined;
    }
    async writeFile(path, content) {
        return this.writeFileSync(path, content);
    }
    writeFileSync(path, content) {
        const fp = new file_path_utils_1.FilePath(path);
        const entry = this.getEntry(fp.getDirectory());
        if (!entry) {
            throw new Error(`Path does not exist for ${path}`);
        }
        else if (entry.type === file_system_1.FileSystemEntryType.FILE) {
            throw new Error('cannot add subfiles into files');
        }
        entry.children[fp.getFullFileName()] = {
            fullPath: path,
            content,
            name: fp.getFileName(),
            parent: entry,
            type: file_system_1.FileSystemEntryType.FILE
        };
    }
    getEntry(path) {
        let ptr = this.fileSystem;
        if (path.startsWith('/')) {
            path = path.substring(1);
        }
        const pieces = path.split('/').filter((p) => p);
        for (const piece of pieces) {
            if (typeof ptr === 'string') {
                return undefined;
            }
            ptr = ptr.children[piece];
            if (!ptr) {
                return undefined;
            }
        }
        return ptr;
    }
}
exports.MemoryFileSystem = MemoryFileSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbW9yeV9maWxlX3N5c3RlbS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibWVtb3J5X2ZpbGVfc3lzdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZmlsZV9zeXN0ZW1fMSA9IHJlcXVpcmUoXCIuLi9maWxlX3N5c3RlbVwiKTtcbmNvbnN0IGZpbGVfcGF0aF91dGlsc18xID0gcmVxdWlyZShcIi4uL2ZpbGVfcGF0aF91dGlsc1wiKTtcbmNvbnN0IHBhdGhfMSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY2xhc3MgTWVtb3J5RmlsZVN5c3RlbSBleHRlbmRzIGZpbGVfc3lzdGVtXzEuRmlsZVN5c3RlbSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpbGVTeXN0ZW0gPSBkYXRhXG4gICAgICAgICAgICA/IHRoaXMuZnJvbUpzb24oZGF0YSlcbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB7fSxcbiAgICAgICAgICAgICAgICBmdWxsUGF0aDogJy8nLFxuICAgICAgICAgICAgICAgIG5hbWU6ICcvJyxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBmaWxlX3N5c3RlbV8xLkZpbGVTeXN0ZW1FbnRyeVR5cGUuRElSRUNUT1JZXG4gICAgICAgICAgICB9O1xuICAgIH1cbiAgICB3YXRjaChwYXRocywgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cbiAgICB3YXRjaFN5bmMocGF0aHMsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgYXN5bmMgcmVhZGxpbmsocGF0aCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJlYWRsaW5rU3luYyhwYXRoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgYXN5bmMgcmVhbHBhdGgocGF0aCkge1xuICAgICAgICByZXR1cm4gcGF0aF8xLnJlc29sdmUocGF0aCk7XG4gICAgfVxuICAgIHJlYWxwYXRoU3luYyhwYXRoKSB7XG4gICAgICAgIHJldHVybiBwYXRoXzEucmVzb2x2ZShwYXRoKTtcbiAgICB9XG4gICAgZnJvbUpzb24oanNvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbiAgICBhc3luYyB0b0pzb24oKSB7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gYXdhaXQgdGhpcy5yZWFkRGlyUmVjdXJzaXZlKCcvJywge30pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICByZXN1bHRbZmlsZV0gPSB0aGlzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmOCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIG1rZGlyKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWtkaXJTeW5jKHBhdGgpO1xuICAgIH1cbiAgICBta2RpclN5bmMocGF0aCkge1xuICAgICAgICBjb25zdCBmcCA9IG5ldyBmaWxlX3BhdGhfdXRpbHNfMS5GaWxlUGF0aChwYXRoKTtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmdldEVudHJ5KGZwLmdldERpcmVjdG9yeSgpKTtcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXRoIGRvZXMgbm90IGV4aXN0IGZvciAke3BhdGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZW50cnkudHlwZSA9PT0gZmlsZV9zeXN0ZW1fMS5GaWxlU3lzdGVtRW50cnlUeXBlLkZJTEUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGFkZCBkaXJlY3RvcmllcyBpbnRvIGZpbGVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgZW50cnkuY2hpbGRyZW5bZnAuZ2V0RnVsbEZpbGVOYW1lKCldID0ge1xuICAgICAgICAgICAgZnVsbFBhdGg6IHBhdGgsXG4gICAgICAgICAgICBjaGlsZHJlbjoge30sXG4gICAgICAgICAgICBuYW1lOiBmcC5nZXRGdWxsRmlsZU5hbWUoKSxcbiAgICAgICAgICAgIHBhcmVudDogZW50cnksXG4gICAgICAgICAgICB0eXBlOiBmaWxlX3N5c3RlbV8xLkZpbGVTeXN0ZW1FbnRyeVR5cGUuRElSRUNUT1JZXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHJtZGlyKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm1kaXJTeW5jKHBhdGgpO1xuICAgIH1cbiAgICBybWRpclN5bmMocGF0aCkge1xuICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuZ2V0RW50cnkocGF0aCk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgaWYgKGVudHJ5LnR5cGUgPT09IGZpbGVfc3lzdGVtXzEuRmlsZVN5c3RlbUVudHJ5VHlwZS5ESVJFQ1RPUlkpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoZW50cnkuY2hpbGRyZW4pLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VubGluayBjYW4gb25seSBkZWxldGUgZW1wdHkgZGlyZWN0b3JpZXMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVudHJ5LnBhcmVudC5jaGlsZHJlbltlbnRyeS5uYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcm1kaXIgY2FuIG9ubHkgcmVtb3ZlIGRpcmVjdG9yaWVzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhdGggbm90IGZvdW5kOiAke3BhdGh9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgdW5saW5rKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5saW5rU3luYyhwYXRoKTtcbiAgICB9XG4gICAgdW5saW5rU3luYyhwYXRoKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5nZXRFbnRyeShwYXRoKTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICBpZiAoZW50cnkudHlwZSA9PT0gZmlsZV9zeXN0ZW1fMS5GaWxlU3lzdGVtRW50cnlUeXBlLkRJUkVDVE9SWSkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhlbnRyeS5jaGlsZHJlbikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5saW5rIGNhbiBvbmx5IGRlbGV0ZSBlbXB0eSBkaXJlY3RvcmllcycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSBlbnRyeS5wYXJlbnQuY2hpbGRyZW5bZW50cnkubmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhdGggbm90IGZvdW5kOiAke3BhdGh9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcmVhZEZpbGUocGF0aCwgZW5jb2RpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZEZpbGVTeW5jKHBhdGgsIGVuY29kaW5nKTtcbiAgICB9XG4gICAgcmVhZEZpbGVTeW5jKHBhdGgsIGVuY29kaW5nKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5nZXRFbnRyeShwYXRoKTtcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIHBhdGggJHtwYXRofWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS50eXBlID09PSBmaWxlX3N5c3RlbV8xLkZpbGVTeXN0ZW1FbnRyeVR5cGUuRElSRUNUT1JZKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cGF0aH0gaXMgYSBkaXJlY3RvcnlgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cnkuY29udGVudDtcbiAgICB9XG4gICAgYXN5bmMgc3RhdChwYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRTeW5jKHBhdGgpO1xuICAgIH1cbiAgICBzdGF0U3luYyhwYXRoKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5nZXRFbnRyeShwYXRoKTtcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIHBhdGggJHtwYXRofWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHMgPSB7XG4gICAgICAgICAgICB0eXBlOiBlbnRyeS50eXBlLFxuICAgICAgICAgICAgaXNCbG9ja0RldmljZTogZmFsc2UsXG4gICAgICAgICAgICBpc0NoYXJhY3RlckRldmljZTogZmFsc2UsXG4gICAgICAgICAgICBpc0ZJRk86IGZhbHNlLFxuICAgICAgICAgICAgaXNTb2NrZXQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNTeW1ib2xpY0xpbms6IGZhbHNlLFxuICAgICAgICAgICAgc2l6ZTogZW50cnkuY29udGVudCA/IGVudHJ5LmNvbnRlbnQubGVuZ3RoIDogMFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgYXN5bmMgcmVhZERpcihwYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWREaXJTeW5jKHBhdGgpO1xuICAgIH1cbiAgICByZWFkRGlyU3luYyhwYXRoKSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5nZXRFbnRyeShwYXRoKTtcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIHBhdGggJHtwYXRofWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS50eXBlID09PSBmaWxlX3N5c3RlbV8xLkZpbGVTeXN0ZW1FbnRyeVR5cGUuRklMRSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3BhdGh9IGlzIGEgZmlsZWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhlbnRyeS5jaGlsZHJlbik7XG4gICAgfVxuICAgIGFzeW5jIGV4aXN0cyhwYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4aXN0c1N5bmMocGF0aCk7XG4gICAgfVxuICAgIGV4aXN0c1N5bmMocGF0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRFbnRyeShwYXRoKSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhc3luYyB3cml0ZUZpbGUocGF0aCwgY29udGVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy53cml0ZUZpbGVTeW5jKHBhdGgsIGNvbnRlbnQpO1xuICAgIH1cbiAgICB3cml0ZUZpbGVTeW5jKHBhdGgsIGNvbnRlbnQpIHtcbiAgICAgICAgY29uc3QgZnAgPSBuZXcgZmlsZV9wYXRoX3V0aWxzXzEuRmlsZVBhdGgocGF0aCk7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5nZXRFbnRyeShmcC5nZXREaXJlY3RvcnkoKSk7XG4gICAgICAgIGlmICghZW50cnkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUGF0aCBkb2VzIG5vdCBleGlzdCBmb3IgJHtwYXRofWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVudHJ5LnR5cGUgPT09IGZpbGVfc3lzdGVtXzEuRmlsZVN5c3RlbUVudHJ5VHlwZS5GSUxFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBhZGQgc3ViZmlsZXMgaW50byBmaWxlcycpO1xuICAgICAgICB9XG4gICAgICAgIGVudHJ5LmNoaWxkcmVuW2ZwLmdldEZ1bGxGaWxlTmFtZSgpXSA9IHtcbiAgICAgICAgICAgIGZ1bGxQYXRoOiBwYXRoLFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIG5hbWU6IGZwLmdldEZpbGVOYW1lKCksXG4gICAgICAgICAgICBwYXJlbnQ6IGVudHJ5LFxuICAgICAgICAgICAgdHlwZTogZmlsZV9zeXN0ZW1fMS5GaWxlU3lzdGVtRW50cnlUeXBlLkZJTEVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0RW50cnkocGF0aCkge1xuICAgICAgICBsZXQgcHRyID0gdGhpcy5maWxlU3lzdGVtO1xuICAgICAgICBpZiAocGF0aC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwaWVjZXMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKChwKSA9PiBwKTtcbiAgICAgICAgZm9yIChjb25zdCBwaWVjZSBvZiBwaWVjZXMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHRyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwdHIgPSBwdHIuY2hpbGRyZW5bcGllY2VdO1xuICAgICAgICAgICAgaWYgKCFwdHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwdHI7XG4gICAgfVxufVxuZXhwb3J0cy5NZW1vcnlGaWxlU3lzdGVtID0gTWVtb3J5RmlsZVN5c3RlbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJXVnRiM0o1WDJacGJHVmZjM2x6ZEdWdExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpYldWdGIzSjVYMlpwYkdWZmMzbHpkR1Z0TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUVzWjBSQlFXbEZPMEZCUTJwRkxIZEVRVUU0UXp0QlFVTTVReXdyUWtGQkswSTdRVUZETDBJc1RVRkJZU3huUWtGQmFVSXNVMEZCVVN4M1FrRkJWVHRKUVVNMVF5eFpRVUZaTEVsQlFVazdVVUZEV2l4TFFVRkxMRVZCUVVVc1EwRkJRenRSUVVOU0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NTVUZCU1R0WlFVTnNRaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkRja0lzUTBGQlF5eERRVUZETzJkQ1FVTkZMRkZCUVZFc1JVRkJSU3hGUVVGRk8yZENRVU5hTEZGQlFWRXNSVUZCUlN4SFFVRkhPMmRDUVVOaUxFbEJRVWtzUlVGQlJTeEhRVUZITzJkQ1FVTlVMRTFCUVUwc1JVRkJSU3hUUVVGVE8yZENRVU5xUWl4SlFVRkpMRVZCUVVVc2FVTkJRVzFDTEVOQlFVTXNVMEZCVXp0aFFVTjBReXhEUVVGRE8wbEJRMVlzUTBGQlF6dEpRVU5FTEV0QlFVc3NRMEZCUXl4TFFVRkxMRVZCUVVVc1QwRkJUeXhGUVVGRkxGRkJRVkU3VVVGRE1VSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4RFFVRkRPMGxCUXk5RExFTkJRVU03U1VGRFJDeFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkJSU3hSUVVGUk8xRkJRemxDTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNRMEZCUXp0SlFVTXZReXhEUVVGRE8wbEJRMFFzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpPMUZCUTJZc1QwRkJUeXhGUVVGRkxFTkJRVU03U1VGRFpDeERRVUZETzBsQlEwUXNXVUZCV1N4RFFVRkRMRWxCUVVrN1VVRkRZaXhQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU5rTEVOQlFVTTdTVUZEUkN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWs3VVVGRFppeFBRVUZQTEdOQlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVONlFpeERRVUZETzBsQlEwUXNXVUZCV1N4RFFVRkRMRWxCUVVrN1VVRkRZaXhQUVVGUExHTkJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SlFVTjZRaXhEUVVGRE8wbEJRMFFzVVVGQlVTeERRVUZETEVsQlFVazdVVUZEVkN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1NVRkRka01zUTBGQlF6dEpRVU5FTEV0QlFVc3NRMEZCUXl4TlFVRk5PMUZCUTFJc1RVRkJUU3hMUVVGTExFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTI1RUxFMUJRVTBzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTnNRaXhMUVVGTExFMUJRVTBzU1VGQlNTeEpRVUZKTEV0QlFVc3NSVUZCUlR0WlFVTjBRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTTdVMEZEYkVRN1VVRkRSQ3hQUVVGUExFMUJRVTBzUTBGQlF6dEpRVU5zUWl4RFFVRkRPMGxCUTBRc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTzFGQlExb3NUMEZCVHl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEyaERMRU5CUVVNN1NVRkRSQ3hUUVVGVExFTkJRVU1zU1VGQlNUdFJRVU5XTEUxQlFVMHNSVUZCUlN4SFFVRkhMRWxCUVVrc01FSkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTTVRaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJReXhaUVVGWkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlF5OURMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVU3V1VGRFVpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMREpDUVVFeVFpeEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPMU5CUTNSRU8yRkJRMGtzU1VGQlNTeExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xEUVVGdFFpeERRVUZETEVsQlFVa3NSVUZCUlR0WlFVTTVReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEcxRFFVRnRReXhEUVVGRExFTkJRVU03VTBGRGVFUTdVVUZEUkN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUXl4SFFVRkhPMWxCUTI1RExGRkJRVkVzUlVGQlJTeEpRVUZKTzFsQlEyUXNVVUZCVVN4RlFVRkZMRVZCUVVVN1dVRkRXaXhKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEdWQlFXVXNSVUZCUlR0WlFVTXhRaXhOUVVGTkxFVkJRVVVzUzBGQlN6dFpRVU5pTEVsQlFVa3NSVUZCUlN4cFEwRkJiVUlzUTBGQlF5eFRRVUZUTzFOQlEzUkRMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJRMFFzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpPMUZCUTFvc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTJoRExFTkJRVU03U1VGRFJDeFRRVUZUTEVOQlFVTXNTVUZCU1R0UlFVTldMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRiRU1zU1VGQlNTeExRVUZMTEVWQlFVVTdXVUZEVUN4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzYVVOQlFXMUNMRU5CUVVNc1UwRkJVeXhGUVVGRk8yZENRVU01UXl4SlFVRkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFVkJRVVU3YjBKQlF6RkRMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zTUVOQlFUQkRMRU5CUVVNc1EwRkJRenRwUWtGREwwUTdaMEpCUTBRc1QwRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03WVVGRE5VTTdhVUpCUTBrN1owSkJRMFFzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4dFEwRkJiVU1zUTBGQlF5eERRVUZETzJGQlEzaEVPMU5CUTBvN1lVRkRTVHRaUVVORUxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNiVUpCUVcxQ0xFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdVMEZET1VNN1NVRkRUQ3hEUVVGRE8wbEJRMFFzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpPMUZCUTJJc1QwRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTJwRExFTkJRVU03U1VGRFJDeFZRVUZWTEVOQlFVTXNTVUZCU1R0UlFVTllMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRiRU1zU1VGQlNTeExRVUZMTEVWQlFVVTdXVUZEVUN4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzYVVOQlFXMUNMRU5CUVVNc1UwRkJVeXhGUVVGRk8yZENRVU01UXl4SlFVRkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFVkJRVVU3YjBKQlF6RkRMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zTUVOQlFUQkRMRU5CUVVNc1EwRkJRenRwUWtGREwwUTdZVUZEU2p0WlFVTkVMRTlCUVU4c1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRelZETzJGQlEwazdXVUZEUkN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExHMUNRVUZ0UWl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xTkJRemxETzBsQlEwd3NRMEZCUXp0SlFVTkVMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRTdVVUZEZWtJc1QwRkJUeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVNM1F5eERRVUZETzBsQlEwUXNXVUZCV1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUk8xRkJRM1pDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEYkVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdFpRVU5TTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc1owSkJRV2RDTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1UwRkRNME03VVVGRFJDeEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRXRCUVVzc2FVTkJRVzFDTEVOQlFVTXNVMEZCVXl4RlFVRkZPMWxCUXpsRExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNSMEZCUnl4SlFVRkpMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdVMEZETjBNN1VVRkRSQ3hQUVVGUExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTTdTVUZEZWtJc1EwRkJRenRKUVVORUxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1R0UlFVTllMRTlCUVU4c1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SlFVTXZRaXhEUVVGRE8wbEJRMFFzVVVGQlVTeERRVUZETEVsQlFVazdVVUZEVkN4TlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTJ4RExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZEVWl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRE8xTkJRek5ETzFGQlEwUXNUVUZCVFN4RFFVRkRMRWRCUVVjN1dVRkRUaXhKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVsQlFVazdXVUZEYUVJc1lVRkJZU3hGUVVGRkxFdEJRVXM3V1VGRGNFSXNhVUpCUVdsQ0xFVkJRVVVzUzBGQlN6dFpRVU40UWl4TlFVRk5MRVZCUVVVc1MwRkJTenRaUVVOaUxGRkJRVkVzUlVGQlJTeExRVUZMTzFsQlEyWXNZMEZCWXl4RlFVRkZMRXRCUVVzN1dVRkRja0lzU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMnBFTEVOQlFVTTdVVUZEUml4UFFVRlBMRU5CUVVNc1EwRkJRenRKUVVOaUxFTkJRVU03U1VGRFJDeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrN1VVRkRaQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRiRU1zUTBGQlF6dEpRVU5FTEZkQlFWY3NRMEZCUXl4SlFVRkpPMUZCUTFvc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOc1F5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMWxCUTFJc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFRRVU16UXp0UlFVTkVMRWxCUVVrc1MwRkJTeXhEUVVGRExFbEJRVWtzUzBGQlN5eHBRMEZCYlVJc1EwRkJReXhKUVVGSkxFVkJRVVU3V1VGRGVrTXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhIUVVGSExFbEJRVWtzV1VGQldTeERRVUZETEVOQlFVTTdVMEZEZUVNN1VVRkRSQ3hQUVVGUExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRM1pETEVOQlFVTTdTVUZEUkN4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWs3VVVGRFlpeFBRVUZQTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRGFrTXNRMEZCUXp0SlFVTkVMRlZCUVZVc1EwRkJReXhKUVVGSk8xRkJRMWdzVDBGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExGTkJRVk1zUTBGQlF6dEpRVU0zUXl4RFFVRkRPMGxCUTBRc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHp0UlFVTjZRaXhQUVVGUExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wbEJRemRETEVOQlFVTTdTVUZEUkN4aFFVRmhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVTg3VVVGRGRrSXNUVUZCVFN4RlFVRkZMRWRCUVVjc1NVRkJTU3d3UWtGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXpsQ0xFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZETDBNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdFpRVU5TTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc01rSkJRVEpDTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1UwRkRkRVE3WVVGRFNTeEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRXRCUVVzc2FVTkJRVzFDTEVOQlFVTXNTVUZCU1N4RlFVRkZPMWxCUXpsRExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNaME5CUVdkRExFTkJRVU1zUTBGQlF6dFRRVU55UkR0UlFVTkVMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETEdWQlFXVXNSVUZCUlN4RFFVRkRMRWRCUVVjN1dVRkRia01zVVVGQlVTeEZRVUZGTEVsQlFVazdXVUZEWkN4UFFVRlBPMWxCUTFBc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eFhRVUZYTEVWQlFVVTdXVUZEZEVJc1RVRkJUU3hGUVVGRkxFdEJRVXM3V1VGRFlpeEpRVUZKTEVWQlFVVXNhVU5CUVcxQ0xFTkJRVU1zU1VGQlNUdFRRVU5xUXl4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVORUxGRkJRVkVzUTBGQlF5eEpRVUZKTzFGQlExUXNTVUZCU1N4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF6dFJRVU14UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVTdXVUZEZEVJc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkROVUk3VVVGRFJDeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYUVRc1MwRkJTeXhOUVVGTkxFdEJRVXNzU1VGQlNTeE5RVUZOTEVWQlFVVTdXVUZEZUVJc1NVRkJTU3hQUVVGUExFZEJRVWNzUzBGQlN5eFJRVUZSTEVWQlFVVTdaMEpCUTNwQ0xFOUJRVThzVTBGQlV5eERRVUZETzJGQlEzQkNPMWxCUTBRc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRNVUlzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlR0blFrRkRUaXhQUVVGUExGTkJRVk1zUTBGQlF6dGhRVU53UWp0VFFVTktPMUZCUTBRc1QwRkJUeXhIUVVGSExFTkJRVU03U1VGRFppeERRVUZETzBOQlEwbzdRVUV6VEVRc05FTkJNa3hESW4wPSJdfQ==