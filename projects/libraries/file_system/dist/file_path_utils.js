"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
class FilePath {
    constructor(path) {
        this.extractDataFromPath(path);
    }
    getFileExtensions() {
        return this.fileExtensions.slice();
    }
    setExtension(extension) {
        if (extension.startsWith('.')) {
            extension = extension.substring(1);
        }
        this.fileExtensions = extension.split('.');
        return this;
    }
    getExtensionString() {
        if (this.fileExtensions.length > 0) {
            return '.' + this.fileExtensions.join('.');
        }
        else {
            return '';
        }
    }
    getDirectory() {
        return this.directory;
    }
    setDirectory(path) {
        this.directory = path;
        return this;
    }
    setFileName(fileName) {
        this.fileName = fileName;
        return this;
    }
    getFileName() {
        return this.fileName;
    }
    getFullFileName() {
        return this.fileName + this.getExtensionString();
    }
    toString() {
        return path_1.join(this.directory, this.fileName + this.getExtensionString());
    }
    extractDataFromPath(path) {
        const data = path_1.parse(path);
        this.directory = data.dir;
        if (data.name.includes('.')) {
            this.fileName = data.name.substring(0, data.name.indexOf('.'));
        }
        else {
            this.fileName = data.name;
        }
        this.fileExtensions = data.base.split('.').slice(1);
    }
}
exports.FilePath = FilePath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGVfcGF0aF91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImZpbGVfcGF0aF91dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHBhdGhfMSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY2xhc3MgRmlsZVBhdGgge1xuICAgIGNvbnN0cnVjdG9yKHBhdGgpIHtcbiAgICAgICAgdGhpcy5leHRyYWN0RGF0YUZyb21QYXRoKHBhdGgpO1xuICAgIH1cbiAgICBnZXRGaWxlRXh0ZW5zaW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZUV4dGVuc2lvbnMuc2xpY2UoKTtcbiAgICB9XG4gICAgc2V0RXh0ZW5zaW9uKGV4dGVuc2lvbikge1xuICAgICAgICBpZiAoZXh0ZW5zaW9uLnN0YXJ0c1dpdGgoJy4nKSkge1xuICAgICAgICAgICAgZXh0ZW5zaW9uID0gZXh0ZW5zaW9uLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbGVFeHRlbnNpb25zID0gZXh0ZW5zaW9uLnNwbGl0KCcuJyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXRFeHRlbnNpb25TdHJpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbGVFeHRlbnNpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnLicgKyB0aGlzLmZpbGVFeHRlbnNpb25zLmpvaW4oJy4nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXREaXJlY3RvcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdG9yeTtcbiAgICB9XG4gICAgc2V0RGlyZWN0b3J5KHBhdGgpIHtcbiAgICAgICAgdGhpcy5kaXJlY3RvcnkgPSBwYXRoO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0RmlsZU5hbWUoZmlsZU5hbWUpIHtcbiAgICAgICAgdGhpcy5maWxlTmFtZSA9IGZpbGVOYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0RmlsZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVOYW1lO1xuICAgIH1cbiAgICBnZXRGdWxsRmlsZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVOYW1lICsgdGhpcy5nZXRFeHRlbnNpb25TdHJpbmcoKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBwYXRoXzEuam9pbih0aGlzLmRpcmVjdG9yeSwgdGhpcy5maWxlTmFtZSArIHRoaXMuZ2V0RXh0ZW5zaW9uU3RyaW5nKCkpO1xuICAgIH1cbiAgICBleHRyYWN0RGF0YUZyb21QYXRoKHBhdGgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHBhdGhfMS5wYXJzZShwYXRoKTtcbiAgICAgICAgdGhpcy5kaXJlY3RvcnkgPSBkYXRhLmRpcjtcbiAgICAgICAgaWYgKGRhdGEubmFtZS5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGVOYW1lID0gZGF0YS5uYW1lLnN1YnN0cmluZygwLCBkYXRhLm5hbWUuaW5kZXhPZignLicpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmlsZU5hbWUgPSBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maWxlRXh0ZW5zaW9ucyA9IGRhdGEuYmFzZS5zcGxpdCgnLicpLnNsaWNlKDEpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsZVBhdGggPSBGaWxlUGF0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVptbHNaVjl3WVhSb1gzVjBhV3h6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2labWxzWlY5d1lYUm9YM1YwYVd4ekxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFc0swSkJRVzFETzBGQlEyNURMRTFCUVdFc1VVRkJVVHRKUVVOcVFpeFpRVUZaTEVsQlFVazdVVUZEV2l4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRia01zUTBGQlF6dEpRVU5FTEdsQ1FVRnBRanRSUVVOaUxFOUJRVThzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRKUVVOMlF5eERRVUZETzBsQlEwUXNXVUZCV1N4RFFVRkRMRk5CUVZNN1VVRkRiRUlzU1VGQlNTeFRRVUZUTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRk8xbEJRek5DTEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEzUkRPMUZCUTBRc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRek5ETEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJoQ0xFTkJRVU03U1VGRFJDeHJRa0ZCYTBJN1VVRkRaQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSVHRaUVVOb1F5eFBRVUZQTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0VFFVTTVRenRoUVVOSk8xbEJRMFFzVDBGQlR5eEZRVUZGTEVOQlFVTTdVMEZEWWp0SlFVTk1MRU5CUVVNN1NVRkRSQ3haUVVGWk8xRkJRMUlzVDBGQlR5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMGxCUXpGQ0xFTkJRVU03U1VGRFJDeFpRVUZaTEVOQlFVTXNTVUZCU1R0UlFVTmlMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETzFGQlEzUkNMRTlCUVU4c1NVRkJTU3hEUVVGRE8wbEJRMmhDTEVOQlFVTTdTVUZEUkN4WFFVRlhMRU5CUVVNc1VVRkJVVHRSUVVOb1FpeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJRenRSUVVONlFpeFBRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTm9RaXhEUVVGRE8wbEJRMFFzVjBGQlZ6dFJRVU5RTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRKUVVONlFpeERRVUZETzBsQlEwUXNaVUZCWlR0UlFVTllMRTlCUVU4c1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzUTBGQlF6dEpRVU55UkN4RFFVRkRPMGxCUTBRc1VVRkJVVHRSUVVOS0xFOUJRVThzVjBGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6TkZMRU5CUVVNN1NVRkRSQ3h0UWtGQmJVSXNRMEZCUXl4SlFVRkpPMUZCUTNCQ0xFMUJRVTBzU1VGQlNTeEhRVUZITEZsQlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVONlFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VVVGRE1VSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlR0WlFVTjZRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEyeEZPMkZCUTBrN1dVRkRSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1UwRkROMEk3VVVGRFJDeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU40UkN4RFFVRkRPME5CUTBvN1FVRnlSRVFzTkVKQmNVUkRJbjA9Il19