"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
class FilePath {
    constructor(path) {
        this.extractDataFromPath(path);
    }
    getFileExtensions() {
        return this.fileExtensions.slice();
    }
    setExtension(extension) {
        if (extension.startsWith('.')) {
            extension = extension.substring(1);
        }
        this.fileExtensions = extension.split('.');
        return this;
    }
    getExtensionString() {
        if (this.fileExtensions.length > 0) {
            return '.' + this.fileExtensions.join('.');
        }
        else {
            return '';
        }
    }
    getDirectory() {
        return this.directory;
    }
    setDirectory(path) {
        this.directory = path;
        return this;
    }
    setFileName(fileName) {
        this.fileName = fileName;
        return this;
    }
    getFileName() {
        return this.fileName;
    }
    getFullFileName() {
        return this.fileName + this.getExtensionString();
    }
    toString() {
        return path_1.join(this.directory, this.fileName + this.getExtensionString());
    }
    extractDataFromPath(path) {
        const data = path_1.parse(path);
        this.directory = data.dir;
        if (data.name.includes('.')) {
            this.fileName = data.name.substring(0, data.name.indexOf('.'));
        }
        else {
            this.fileName = data.name;
        }
        this.fileExtensions = path.split('.').slice(1);
    }
}
exports.FilePath = FilePath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGVfcGF0aF91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImZpbGVfcGF0aF91dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHBhdGhfMSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY2xhc3MgRmlsZVBhdGgge1xuICAgIGNvbnN0cnVjdG9yKHBhdGgpIHtcbiAgICAgICAgdGhpcy5leHRyYWN0RGF0YUZyb21QYXRoKHBhdGgpO1xuICAgIH1cbiAgICBnZXRGaWxlRXh0ZW5zaW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZUV4dGVuc2lvbnMuc2xpY2UoKTtcbiAgICB9XG4gICAgc2V0RXh0ZW5zaW9uKGV4dGVuc2lvbikge1xuICAgICAgICBpZiAoZXh0ZW5zaW9uLnN0YXJ0c1dpdGgoJy4nKSkge1xuICAgICAgICAgICAgZXh0ZW5zaW9uID0gZXh0ZW5zaW9uLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbGVFeHRlbnNpb25zID0gZXh0ZW5zaW9uLnNwbGl0KCcuJyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXRFeHRlbnNpb25TdHJpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbGVFeHRlbnNpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnLicgKyB0aGlzLmZpbGVFeHRlbnNpb25zLmpvaW4oJy4nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXREaXJlY3RvcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdG9yeTtcbiAgICB9XG4gICAgc2V0RGlyZWN0b3J5KHBhdGgpIHtcbiAgICAgICAgdGhpcy5kaXJlY3RvcnkgPSBwYXRoO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0RmlsZU5hbWUoZmlsZU5hbWUpIHtcbiAgICAgICAgdGhpcy5maWxlTmFtZSA9IGZpbGVOYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0RmlsZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVOYW1lO1xuICAgIH1cbiAgICBnZXRGdWxsRmlsZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVOYW1lICsgdGhpcy5nZXRFeHRlbnNpb25TdHJpbmcoKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBwYXRoXzEuam9pbih0aGlzLmRpcmVjdG9yeSwgdGhpcy5maWxlTmFtZSArIHRoaXMuZ2V0RXh0ZW5zaW9uU3RyaW5nKCkpO1xuICAgIH1cbiAgICBleHRyYWN0RGF0YUZyb21QYXRoKHBhdGgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHBhdGhfMS5wYXJzZShwYXRoKTtcbiAgICAgICAgdGhpcy5kaXJlY3RvcnkgPSBkYXRhLmRpcjtcbiAgICAgICAgaWYgKGRhdGEubmFtZS5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGVOYW1lID0gZGF0YS5uYW1lLnN1YnN0cmluZygwLCBkYXRhLm5hbWUuaW5kZXhPZignLicpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmlsZU5hbWUgPSBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maWxlRXh0ZW5zaW9ucyA9IHBhdGguc3BsaXQoJy4nKS5zbGljZSgxKTtcbiAgICB9XG59XG5leHBvcnRzLkZpbGVQYXRoID0gRmlsZVBhdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2labWxzWlY5d1lYUm9YM1YwYVd4ekxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpWm1sc1pWOXdZWFJvWDNWMGFXeHpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNLMEpCUVcxRE8wRkJRMjVETEUxQlFXRXNVVUZCVVR0SlFVTnFRaXhaUVVGWkxFbEJRVWs3VVVGRFdpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEYmtNc1EwRkJRenRKUVVORUxHbENRVUZwUWp0UlFVTmlMRTlCUVU4c1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0SlFVTjJReXhEUVVGRE8wbEJRMFFzV1VGQldTeERRVUZETEZOQlFWTTdVVUZEYkVJc1NVRkJTU3hUUVVGVExFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMWxCUXpOQ0xGTkJRVk1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRM1JETzFGQlEwUXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUXpORExFOUJRVThzU1VGQlNTeERRVUZETzBsQlEyaENMRU5CUVVNN1NVRkRSQ3hyUWtGQmEwSTdVVUZEWkN4SlFVRkpMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlR0WlFVTm9ReXhQUVVGUExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFRRVU01UXp0aFFVTkpPMWxCUTBRc1QwRkJUeXhGUVVGRkxFTkJRVU03VTBGRFlqdEpRVU5NTEVOQlFVTTdTVUZEUkN4WlFVRlpPMUZCUTFJc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETzBsQlF6RkNMRU5CUVVNN1NVRkRSQ3haUVVGWkxFTkJRVU1zU1VGQlNUdFJRVU5pTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRE8xRkJRM1JDTEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJoQ0xFTkJRVU03U1VGRFJDeFhRVUZYTEVOQlFVTXNVVUZCVVR0UlFVTm9RaXhKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXp0UlFVTjZRaXhQUVVGUExFbEJRVWtzUTBGQlF6dEpRVU5vUWl4RFFVRkRPMGxCUTBRc1YwRkJWenRSUVVOUUxFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0SlFVTjZRaXhEUVVGRE8wbEJRMFFzWlVGQlpUdFJRVU5ZTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1EwRkJRenRKUVVOeVJDeERRVUZETzBsQlEwUXNVVUZCVVR0UlFVTktMRTlCUVU4c1YwRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRek5GTEVOQlFVTTdTVUZEUkN4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTzFGQlEzQkNMRTFCUVUwc1NVRkJTU3hIUVVGSExGbEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTjZRaXhKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1VVRkRNVUlzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJUdFpRVU42UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMnhGTzJGQlEwazdXVUZEUkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdVMEZETjBJN1VVRkRSQ3hKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTI1RUxFTkJRVU03UTBGRFNqdEJRWEpFUkN3MFFrRnhSRU1pZlE9PSJdfQ==