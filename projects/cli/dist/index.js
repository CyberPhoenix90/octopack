#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_resolver_1 = require("../../business_logic/config_resolver");
const file_system_1 = require("../../libraries/file_system");
const path_1 = require("path");
const api_1 = require("../../api");
const logger_1 = require("../../libraries/logger");
const argument_parser_1 = require("../../libraries/argument_parser");
//Self executing async function due to lack of top level async support
(async () => {
    const { config, directory: firstDirectory } = await config_resolver_1.findConfiguration(process.cwd(), file_system_1.localDiskFileSystem);
    if (config === undefined) {
        notFound();
    }
    if (config.scope !== 'workspace') {
        const { config, directory } = await config_resolver_1.findConfiguration(path_1.join(firstDirectory, '..'), file_system_1.localDiskFileSystem);
        if (config === undefined) {
            notFound();
        }
        if (config.scope !== 'workspace') {
            console.error(`Expected to find workspace scope but found ${config.scope} at ${directory}`);
            process.exit(-1);
        }
        runScript(config, directory);
    }
    else {
        runScript(config, firstDirectory);
    }
})();
function notFound() {
    console.error(`Could not find any octopack configuration. Please run octo from a folder or subfolder that contains a workspace configuration`);
    process.exit(-1);
}
function runScript(config, workspaceRoot) {
    const devLogger = new logger_1.Logger({
        adapters: [new logger_1.WriteFileLoggerAdapter(path_1.join(__dirname, '../log.txt'))],
        enhancers: [new logger_1.LogLevelPrependerLoggerEnhancer()]
    });
    const uiLogger = new logger_1.Logger({
        adapters: [
            new logger_1.ConsoleLoggerAdapter(),
            new logger_1.CallbackLoggerAdapter((log) => { var _a; return devLogger.log((_a = log.text, (_a !== null && _a !== void 0 ? _a : log.object)), log.logLevel); })
        ],
        enhancers: [new logger_1.LogLevelPrependerLoggerEnhancer()]
    });
    if (process.argv[2] === 'build') {
        new api_1.Build().run(argument_parser_1.parseArguments(process.argv.slice(3)), {
            workspaceRoot,
            fileSystem: file_system_1.localDiskFileSystem,
            devLogger: devLogger,
            uiLogger: uiLogger,
            workspaceConfig: config
        });
    }
    else if (process.argv[2] === 'generate') {
        new api_1.Generate().run(argument_parser_1.parseArguments(process.argv.slice(3)), {
            workspaceRoot,
            fileSystem: file_system_1.localDiskFileSystem,
            devLogger: devLogger,
            uiLogger: uiLogger,
            workspaceConfig: config
        });
    }
    else {
        if (process.argv[2]) {
            uiLogger.error(`Could not find script ${process.argv[2]}`);
        }
        else {
            uiLogger.error(`No script specified`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFFLGlCQUFpQixFQUF5QixNQUFNLHNDQUFzQyxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUIsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDNUMsT0FBTyxFQUNOLE1BQU0sRUFDTixxQkFBcUIsRUFDckIsK0JBQStCLEVBQy9CLG9CQUFvQixFQUNwQixzQkFBc0IsRUFDdEIsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFakUsc0VBQXNFO0FBQ3RFLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDWCxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQzFHLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN6QixRQUFRLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBSSxNQUFNLENBQUMsS0FBSyxLQUFLLFdBQVcsRUFBRTtRQUNqQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0saUJBQWlCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBRXZHLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN6QixRQUFRLEVBQUUsQ0FBQztTQUNYO1FBRUQsSUFBSSxNQUFNLENBQUMsS0FBSyxLQUFLLFdBQVcsRUFBRTtZQUNqQyxPQUFPLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxN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
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwwRUFBeUU7QUFDekUsNkRBQWtFO0FBQ2xFLCtCQUE0QjtBQUM1QixtQ0FBNEM7QUFDNUMsbURBQXNKO0FBQ3RKLHFFQUFpRTtBQUNqRSxzRUFBc0U7QUFDdEUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNSLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sbUNBQWlCLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGlDQUFtQixDQUFDLENBQUM7SUFDMUcsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3RCLFFBQVEsRUFBRSxDQUFDO0tBQ2Q7SUFDRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssV0FBVyxFQUFFO1FBQzlCLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsTUFBTSxtQ0FBaUIsQ0FBQyxXQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLGlDQUFtQixDQUFDLENBQUM7UUFDdkcsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3RCLFFBQVEsRUFBRSxDQUFDO1NBQ2Q7UUFDRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssV0FBVyxFQUFFO1lBQzlCLE9BQU8sQ0FBQyxLQUFLLENBQUMsOENBQThDLE1BQU0sQ0FBQyxLQUFLLE9BQU8sU0FBUyxFQUFFLENBQUMsQ0FBQztZQUM1RixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEI7UUFDRCxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ2hDO1NBQ0k7UUFDRCxTQUFTLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0tBQ3JDO0FBQ0wsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNMLFNBQVMsUUFBUTtJQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0hBQStILENBQUMsQ0FBQztJQUMvSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckIsQ0FBQztBQUNELFNBQVMsU0FBUyxDQUFDLE1BQU0sRUFBRSxhQUFhO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLElBQUksZUFBTSxDQUFDO1FBQ3pCLFFBQVEsRUFBRSxDQUFDLElBQUksK0JBQXNCLENBQUMsV0FBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLFNBQVMsRUFBRSxDQUFDLElBQUksd0NBQStCLEVBQUUsQ0FBQztLQUNyRCxDQUFDLENBQUM7SUFDSCxNQUFNLFFBQVEsR0FBRyxJQUFJLGVBQU0sQ0FBQztRQUN4QixRQUFRLEVBQUU7WUFDTixJQUFJLDZCQUFvQixFQUFFO1lBQzFCLElBQUksOEJBQXFCLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssSUFBSSxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeko7UUFDRCxTQUFTLEVBQUUsQ0FBQyxJQUFJLHdDQUErQixFQUFFLENBQUM7S0FDckQsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sRUFBRTtRQUM3QixJQUFJLFdBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQ0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbkQsYUFBYTtZQUNiLFVBQVUsRUFBRSxpQ0FBbUI7WUFDL0IsU0FBUyxFQUFFLFNBQVM7WUFDcEIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsZUFBZSxFQUFFLE1BQU07U0FDMUIsQ0FBQyxDQUFDO0tBQ047U0FDSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssVUFBVSxFQUFFO1FBQ3JDLElBQUksY0FBUSxFQUFFLENBQUMsR0FBRyxDQUFDLGdDQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0RCxhQUFhO1lBQ2IsVUFBVSxFQUFFLGlDQUFtQjtZQUMvQixTQUFTLEVBQUUsU0FBUztZQUNwQixRQUFRLEVBQUUsUUFBUTtZQUNsQixlQUFlLEVBQUUsTUFBTTtTQUMxQixDQUFDLENBQUM7S0FDTjtTQUNJO1FBQ0QsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2pCLFFBQVEsQ0FBQyxLQUFLLENBQUMseUJBQXlCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzlEO2FBQ0k7WUFDRCxRQUFRLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDekM7S0FDSjtBQUNMLENBQUM7QUFDRCxzd0dBQXN3RyJ9